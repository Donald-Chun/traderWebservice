/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MT4WebService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kMT4GROUP_OPTValues[] = {
  MT4GROUP_OPT::G_DELETE,
  MT4GROUP_OPT::G_ENABLE,
  MT4GROUP_OPT::G_DISABLE,
  MT4GROUP_OPT::G_LEVERAGE,
  MT4GROUP_OPT::G_SETGROUP
};
const char* _kMT4GROUP_OPTNames[] = {
  "G_DELETE",
  "G_ENABLE",
  "G_DISABLE",
  "G_LEVERAGE",
  "G_SETGROUP"
};
const std::map<int, const char*> _MT4GROUP_OPT_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMT4GROUP_OPTValues, _kMT4GROUP_OPTNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMT4DEAL_TYPEValues[] = {
  MT4DEAL_TYPE::D_IN,
  MT4DEAL_TYPE::D_OUT
};
const char* _kMT4DEAL_TYPENames[] = {
  "D_IN",
  "D_OUT"
};
const std::map<int, const char*> _MT4DEAL_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMT4DEAL_TYPEValues, _kMT4DEAL_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMT4TRADE_TYPEValues[] = {
  MT4TRADE_TYPE::T_BUY,
  MT4TRADE_TYPE::T_SELL,
  MT4TRADE_TYPE::T_BUY_LIMIT,
  MT4TRADE_TYPE::T_SELL_LIMIT,
  MT4TRADE_TYPE::T_BUY_STOP,
  MT4TRADE_TYPE::T_SELL_STOP,
  MT4TRADE_TYPE::T_BALANCE,
  MT4TRADE_TYPE::T_CREDIT
};
const char* _kMT4TRADE_TYPENames[] = {
  "T_BUY",
  "T_SELL",
  "T_BUY_LIMIT",
  "T_SELL_LIMIT",
  "T_BUY_STOP",
  "T_SELL_STOP",
  "T_BALANCE",
  "T_CREDIT"
};
const std::map<int, const char*> _MT4TRADE_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMT4TRADE_TYPEValues, _kMT4TRADE_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMT4PASSWORD_TYPEValues[] = {
  MT4PASSWORD_TYPE::P_MASTER,
  MT4PASSWORD_TYPE::P_INVEST
};
const char* _kMT4PASSWORD_TYPENames[] = {
  "P_MASTER",
  "P_INVEST"
};
const std::map<int, const char*> _MT4PASSWORD_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMT4PASSWORD_TYPEValues, _kMT4PASSWORD_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMT4PERIOD_TYPEValues[] = {
  MT4PERIOD_TYPE::P_PERIOD_M1,
  MT4PERIOD_TYPE::P_PERIOD_M5,
  MT4PERIOD_TYPE::P_PERIOD_M15,
  MT4PERIOD_TYPE::P_PERIOD_M30,
  MT4PERIOD_TYPE::P_PERIOD_H1,
  MT4PERIOD_TYPE::P_PERIOD_H4,
  MT4PERIOD_TYPE::P_PERIOD_D1,
  MT4PERIOD_TYPE::P_PERIOD_W1,
  MT4PERIOD_TYPE::P_PERIOD_MN1
};
const char* _kMT4PERIOD_TYPENames[] = {
  "P_PERIOD_M1",
  "P_PERIOD_M5",
  "P_PERIOD_M15",
  "P_PERIOD_M30",
  "P_PERIOD_H1",
  "P_PERIOD_H4",
  "P_PERIOD_D1",
  "P_PERIOD_W1",
  "P_PERIOD_MN1"
};
const std::map<int, const char*> _MT4PERIOD_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kMT4PERIOD_TYPEValues, _kMT4PERIOD_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMT4CHART_TYPEValues[] = {
  MT4CHART_TYPE::C_CHART_RANGE_IN,
  MT4CHART_TYPE::C_CHART_RANGE_OUT,
  MT4CHART_TYPE::C_CHART_RANGE_LAST
};
const char* _kMT4CHART_TYPENames[] = {
  "C_CHART_RANGE_IN",
  "C_CHART_RANGE_OUT",
  "C_CHART_RANGE_LAST"
};
const std::map<int, const char*> _MT4CHART_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMT4CHART_TYPEValues, _kMT4CHART_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


MT4UserRecord::~MT4UserRecord() throw() {
}


void MT4UserRecord::__set_login(const int32_t val) {
  this->login = val;
__isset.login = true;
}

void MT4UserRecord::__set_group(const std::string& val) {
  this->group = val;
}

void MT4UserRecord::__set_password(const std::string& val) {
  this->password = val;
}

void MT4UserRecord::__set_password_investor(const std::string& val) {
  this->password_investor = val;
}

void MT4UserRecord::__set_password_phone(const std::string& val) {
  this->password_phone = val;
__isset.password_phone = true;
}

void MT4UserRecord::__set_enable(const bool val) {
  this->enable = val;
__isset.enable = true;
}

void MT4UserRecord::__set_enable_change_password(const bool val) {
  this->enable_change_password = val;
__isset.enable_change_password = true;
}

void MT4UserRecord::__set_enable_read_only(const bool val) {
  this->enable_read_only = val;
__isset.enable_read_only = true;
}

void MT4UserRecord::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void MT4UserRecord::__set_country(const std::string& val) {
  this->country = val;
__isset.country = true;
}

void MT4UserRecord::__set_city(const std::string& val) {
  this->city = val;
__isset.city = true;
}

void MT4UserRecord::__set_state(const std::string& val) {
  this->state = val;
__isset.state = true;
}

void MT4UserRecord::__set_zipcode(const std::string& val) {
  this->zipcode = val;
__isset.zipcode = true;
}

void MT4UserRecord::__set_address(const std::string& val) {
  this->address = val;
__isset.address = true;
}

void MT4UserRecord::__set_phone(const std::string& val) {
  this->phone = val;
__isset.phone = true;
}

void MT4UserRecord::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void MT4UserRecord::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void MT4UserRecord::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void MT4UserRecord::__set_status(const std::string& val) {
  this->status = val;
__isset.status = true;
}

void MT4UserRecord::__set_leverage(const int32_t val) {
  this->leverage = val;
}

void MT4UserRecord::__set_agent_account(const int32_t val) {
  this->agent_account = val;
__isset.agent_account = true;
}

void MT4UserRecord::__set_taxes(const double val) {
  this->taxes = val;
__isset.taxes = true;
}

void MT4UserRecord::__set_send_reports(const bool val) {
  this->send_reports = val;
__isset.send_reports = true;
}

const char* MT4UserRecord::ascii_fingerprint = "12B8A6B40AE36ED55F8F7E3B0F396573";
const uint8_t MT4UserRecord::binary_fingerprint[16] = {0x12,0xB8,0xA6,0xB4,0x0A,0xE3,0x6E,0xD5,0x5F,0x8F,0x7E,0x3B,0x0F,0x39,0x65,0x73};

uint32_t MT4UserRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_group = false;
  bool isset_password = false;
  bool isset_password_investor = false;
  bool isset_leverage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          isset_group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          isset_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password_investor);
          isset_password_investor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password_phone);
          this->__isset.password_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_change_password);
          this->__isset.enable_change_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_read_only);
          this->__isset.enable_read_only = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->country);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zipcode);
          this->__isset.zipcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leverage);
          isset_leverage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->agent_account);
          this->__isset.agent_account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->taxes);
          this->__isset.taxes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->send_reports);
          this->__isset.send_reports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_group)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_password)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_password_investor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_leverage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MT4UserRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4UserRecord");

  if (this->__isset.login) {
    xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->login);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password_investor", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password_investor);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.password_phone) {
    xfer += oprot->writeFieldBegin("password_phone", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->password_phone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable) {
    xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->enable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_change_password) {
    xfer += oprot->writeFieldBegin("enable_change_password", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->enable_change_password);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_read_only) {
    xfer += oprot->writeFieldBegin("enable_read_only", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->enable_read_only);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.country) {
    xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->country);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.city) {
    xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->city);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.state) {
    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->state);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zipcode) {
    xfer += oprot->writeFieldBegin("zipcode", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->zipcode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.address) {
    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->address);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.phone) {
    xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->phone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comment) {
    xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->comment);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("leverage", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->leverage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agent_account) {
    xfer += oprot->writeFieldBegin("agent_account", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32(this->agent_account);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.taxes) {
    xfer += oprot->writeFieldBegin("taxes", ::apache::thrift::protocol::T_DOUBLE, 22);
    xfer += oprot->writeDouble(this->taxes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.send_reports) {
    xfer += oprot->writeFieldBegin("send_reports", ::apache::thrift::protocol::T_BOOL, 23);
    xfer += oprot->writeBool(this->send_reports);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4UserRecord &a, MT4UserRecord &b) {
  using ::std::swap;
  swap(a.login, b.login);
  swap(a.group, b.group);
  swap(a.password, b.password);
  swap(a.password_investor, b.password_investor);
  swap(a.password_phone, b.password_phone);
  swap(a.enable, b.enable);
  swap(a.enable_change_password, b.enable_change_password);
  swap(a.enable_read_only, b.enable_read_only);
  swap(a.name, b.name);
  swap(a.country, b.country);
  swap(a.city, b.city);
  swap(a.state, b.state);
  swap(a.zipcode, b.zipcode);
  swap(a.address, b.address);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.comment, b.comment);
  swap(a.id, b.id);
  swap(a.status, b.status);
  swap(a.leverage, b.leverage);
  swap(a.agent_account, b.agent_account);
  swap(a.taxes, b.taxes);
  swap(a.send_reports, b.send_reports);
  swap(a.__isset, b.__isset);
}

MT4UserRecord::MT4UserRecord(const MT4UserRecord& other0) {
  login = other0.login;
  group = other0.group;
  password = other0.password;
  password_investor = other0.password_investor;
  password_phone = other0.password_phone;
  enable = other0.enable;
  enable_change_password = other0.enable_change_password;
  enable_read_only = other0.enable_read_only;
  name = other0.name;
  country = other0.country;
  city = other0.city;
  state = other0.state;
  zipcode = other0.zipcode;
  address = other0.address;
  phone = other0.phone;
  email = other0.email;
  comment = other0.comment;
  id = other0.id;
  status = other0.status;
  leverage = other0.leverage;
  agent_account = other0.agent_account;
  taxes = other0.taxes;
  send_reports = other0.send_reports;
  __isset = other0.__isset;
}
MT4UserRecord& MT4UserRecord::operator=(const MT4UserRecord& other1) {
  login = other1.login;
  group = other1.group;
  password = other1.password;
  password_investor = other1.password_investor;
  password_phone = other1.password_phone;
  enable = other1.enable;
  enable_change_password = other1.enable_change_password;
  enable_read_only = other1.enable_read_only;
  name = other1.name;
  country = other1.country;
  city = other1.city;
  state = other1.state;
  zipcode = other1.zipcode;
  address = other1.address;
  phone = other1.phone;
  email = other1.email;
  comment = other1.comment;
  id = other1.id;
  status = other1.status;
  leverage = other1.leverage;
  agent_account = other1.agent_account;
  taxes = other1.taxes;
  send_reports = other1.send_reports;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4UserRecord& obj) {
  using apache::thrift::to_string;
  out << "MT4UserRecord(";
  out << "login="; (obj.__isset.login ? (out << to_string(obj.login)) : (out << "<null>"));
  out << ", " << "group=" << to_string(obj.group);
  out << ", " << "password=" << to_string(obj.password);
  out << ", " << "password_investor=" << to_string(obj.password_investor);
  out << ", " << "password_phone="; (obj.__isset.password_phone ? (out << to_string(obj.password_phone)) : (out << "<null>"));
  out << ", " << "enable="; (obj.__isset.enable ? (out << to_string(obj.enable)) : (out << "<null>"));
  out << ", " << "enable_change_password="; (obj.__isset.enable_change_password ? (out << to_string(obj.enable_change_password)) : (out << "<null>"));
  out << ", " << "enable_read_only="; (obj.__isset.enable_read_only ? (out << to_string(obj.enable_read_only)) : (out << "<null>"));
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "country="; (obj.__isset.country ? (out << to_string(obj.country)) : (out << "<null>"));
  out << ", " << "city="; (obj.__isset.city ? (out << to_string(obj.city)) : (out << "<null>"));
  out << ", " << "state="; (obj.__isset.state ? (out << to_string(obj.state)) : (out << "<null>"));
  out << ", " << "zipcode="; (obj.__isset.zipcode ? (out << to_string(obj.zipcode)) : (out << "<null>"));
  out << ", " << "address="; (obj.__isset.address ? (out << to_string(obj.address)) : (out << "<null>"));
  out << ", " << "phone="; (obj.__isset.phone ? (out << to_string(obj.phone)) : (out << "<null>"));
  out << ", " << "email="; (obj.__isset.email ? (out << to_string(obj.email)) : (out << "<null>"));
  out << ", " << "comment="; (obj.__isset.comment ? (out << to_string(obj.comment)) : (out << "<null>"));
  out << ", " << "id="; (obj.__isset.id ? (out << to_string(obj.id)) : (out << "<null>"));
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ", " << "leverage=" << to_string(obj.leverage);
  out << ", " << "agent_account="; (obj.__isset.agent_account ? (out << to_string(obj.agent_account)) : (out << "<null>"));
  out << ", " << "taxes="; (obj.__isset.taxes ? (out << to_string(obj.taxes)) : (out << "<null>"));
  out << ", " << "send_reports="; (obj.__isset.send_reports ? (out << to_string(obj.send_reports)) : (out << "<null>"));
  out << ")";
  return out;
}


MT4GroupCommand::~MT4GroupCommand() throw() {
}


void MT4GroupCommand::__set_user_logins(const std::vector<int32_t> & val) {
  this->user_logins = val;
}

void MT4GroupCommand::__set_group_opt(const MT4GROUP_OPT::type val) {
  this->group_opt = val;
}

void MT4GroupCommand::__set_newgroup(const std::string& val) {
  this->newgroup = val;
__isset.newgroup = true;
}

void MT4GroupCommand::__set_leverage(const int32_t val) {
  this->leverage = val;
__isset.leverage = true;
}

const char* MT4GroupCommand::ascii_fingerprint = "40230245CB158B7D1C023C52256CCE00";
const uint8_t MT4GroupCommand::binary_fingerprint[16] = {0x40,0x23,0x02,0x45,0xCB,0x15,0x8B,0x7D,0x1C,0x02,0x3C,0x52,0x25,0x6C,0xCE,0x00};

uint32_t MT4GroupCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_user_logins = false;
  bool isset_group_opt = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user_logins.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->user_logins.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readI32(this->user_logins[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_user_logins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->group_opt = (MT4GROUP_OPT::type)ecast7;
          isset_group_opt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newgroup);
          this->__isset.newgroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leverage);
          this->__isset.leverage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_user_logins)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_group_opt)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MT4GroupCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4GroupCommand");

  xfer += oprot->writeFieldBegin("user_logins", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->user_logins.size()));
    std::vector<int32_t> ::const_iterator _iter8;
    for (_iter8 = this->user_logins.begin(); _iter8 != this->user_logins.end(); ++_iter8)
    {
      xfer += oprot->writeI32((*_iter8));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_opt", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->group_opt);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.newgroup) {
    xfer += oprot->writeFieldBegin("newgroup", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->newgroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leverage) {
    xfer += oprot->writeFieldBegin("leverage", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->leverage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4GroupCommand &a, MT4GroupCommand &b) {
  using ::std::swap;
  swap(a.user_logins, b.user_logins);
  swap(a.group_opt, b.group_opt);
  swap(a.newgroup, b.newgroup);
  swap(a.leverage, b.leverage);
  swap(a.__isset, b.__isset);
}

MT4GroupCommand::MT4GroupCommand(const MT4GroupCommand& other9) {
  user_logins = other9.user_logins;
  group_opt = other9.group_opt;
  newgroup = other9.newgroup;
  leverage = other9.leverage;
  __isset = other9.__isset;
}
MT4GroupCommand& MT4GroupCommand::operator=(const MT4GroupCommand& other10) {
  user_logins = other10.user_logins;
  group_opt = other10.group_opt;
  newgroup = other10.newgroup;
  leverage = other10.leverage;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4GroupCommand& obj) {
  using apache::thrift::to_string;
  out << "MT4GroupCommand(";
  out << "user_logins=" << to_string(obj.user_logins);
  out << ", " << "group_opt=" << to_string(obj.group_opt);
  out << ", " << "newgroup="; (obj.__isset.newgroup ? (out << to_string(obj.newgroup)) : (out << "<null>"));
  out << ", " << "leverage="; (obj.__isset.leverage ? (out << to_string(obj.leverage)) : (out << "<null>"));
  out << ")";
  return out;
}


MT4TradeRecord::~MT4TradeRecord() throw() {
}


void MT4TradeRecord::__set_order(const int32_t val) {
  this->order = val;
}

void MT4TradeRecord::__set_login(const int32_t val) {
  this->login = val;
}

void MT4TradeRecord::__set_symbol(const std::string& val) {
  this->symbol = val;
}

void MT4TradeRecord::__set_digits(const int32_t val) {
  this->digits = val;
}

void MT4TradeRecord::__set_cmd(const MT4TRADE_TYPE::type val) {
  this->cmd = val;
}

void MT4TradeRecord::__set_open_time(const int64_t val) {
  this->open_time = val;
}

void MT4TradeRecord::__set_open_price(const double val) {
  this->open_price = val;
}

void MT4TradeRecord::__set_sl(const double val) {
  this->sl = val;
}

void MT4TradeRecord::__set_tp(const double val) {
  this->tp = val;
}

void MT4TradeRecord::__set_close_time(const int64_t val) {
  this->close_time = val;
}

void MT4TradeRecord::__set_value_date(const int64_t val) {
  this->value_date = val;
}

void MT4TradeRecord::__set_expiration(const int64_t val) {
  this->expiration = val;
}

void MT4TradeRecord::__set_commission(const double val) {
  this->commission = val;
}

void MT4TradeRecord::__set_swap(const double val) {
  this->swap = val;
}

void MT4TradeRecord::__set_close_price(const double val) {
  this->close_price = val;
}

void MT4TradeRecord::__set_profit(const double val) {
  this->profit = val;
}

void MT4TradeRecord::__set_taxes(const double val) {
  this->taxes = val;
}

void MT4TradeRecord::__set_comment(const std::string& val) {
  this->comment = val;
}

void MT4TradeRecord::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void MT4TradeRecord::__set_volume(const int32_t val) {
  this->volume = val;
}

const char* MT4TradeRecord::ascii_fingerprint = "19CB3081069AFB49FD5B5C9C9B0EFA73";
const uint8_t MT4TradeRecord::binary_fingerprint[16] = {0x19,0xCB,0x30,0x81,0x06,0x9A,0xFB,0x49,0xFD,0x5B,0x5C,0x9C,0x9B,0x0E,0xFA,0x73};

uint32_t MT4TradeRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->symbol);
          this->__isset.symbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->digits);
          this->__isset.digits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->cmd = (MT4TRADE_TYPE::type)ecast11;
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->open_time);
          this->__isset.open_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->open_price);
          this->__isset.open_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sl);
          this->__isset.sl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tp);
          this->__isset.tp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->close_time);
          this->__isset.close_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value_date);
          this->__isset.value_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          this->__isset.expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->commission);
          this->__isset.commission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->swap);
          this->__isset.swap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->close_price);
          this->__isset.close_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->profit);
          this->__isset.profit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->taxes);
          this->__isset.taxes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->volume);
          this->__isset.volume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4TradeRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4TradeRecord");

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->login);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("symbol", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->symbol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("digits", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->digits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->open_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_price", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->open_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sl", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->sl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tp", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->tp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_time", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->close_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_date", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->value_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commission", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->commission);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->swap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_price", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->close_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profit", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->profit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taxes", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->taxes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("volume", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->volume);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4TradeRecord &a, MT4TradeRecord &b) {
  using ::std::swap;
  swap(a.order, b.order);
  swap(a.login, b.login);
  swap(a.symbol, b.symbol);
  swap(a.digits, b.digits);
  swap(a.cmd, b.cmd);
  swap(a.open_time, b.open_time);
  swap(a.open_price, b.open_price);
  swap(a.sl, b.sl);
  swap(a.tp, b.tp);
  swap(a.close_time, b.close_time);
  swap(a.value_date, b.value_date);
  swap(a.expiration, b.expiration);
  swap(a.commission, b.commission);
  swap(a.swap, b.swap);
  swap(a.close_price, b.close_price);
  swap(a.profit, b.profit);
  swap(a.taxes, b.taxes);
  swap(a.comment, b.comment);
  swap(a.timestamp, b.timestamp);
  swap(a.volume, b.volume);
  swap(a.__isset, b.__isset);
}

MT4TradeRecord::MT4TradeRecord(const MT4TradeRecord& other12) {
  order = other12.order;
  login = other12.login;
  symbol = other12.symbol;
  digits = other12.digits;
  cmd = other12.cmd;
  open_time = other12.open_time;
  open_price = other12.open_price;
  sl = other12.sl;
  tp = other12.tp;
  close_time = other12.close_time;
  value_date = other12.value_date;
  expiration = other12.expiration;
  commission = other12.commission;
  swap = other12.swap;
  close_price = other12.close_price;
  profit = other12.profit;
  taxes = other12.taxes;
  comment = other12.comment;
  timestamp = other12.timestamp;
  volume = other12.volume;
  __isset = other12.__isset;
}
MT4TradeRecord& MT4TradeRecord::operator=(const MT4TradeRecord& other13) {
  order = other13.order;
  login = other13.login;
  symbol = other13.symbol;
  digits = other13.digits;
  cmd = other13.cmd;
  open_time = other13.open_time;
  open_price = other13.open_price;
  sl = other13.sl;
  tp = other13.tp;
  close_time = other13.close_time;
  value_date = other13.value_date;
  expiration = other13.expiration;
  commission = other13.commission;
  swap = other13.swap;
  close_price = other13.close_price;
  profit = other13.profit;
  taxes = other13.taxes;
  comment = other13.comment;
  timestamp = other13.timestamp;
  volume = other13.volume;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4TradeRecord& obj) {
  using apache::thrift::to_string;
  out << "MT4TradeRecord(";
  out << "order=" << to_string(obj.order);
  out << ", " << "login=" << to_string(obj.login);
  out << ", " << "symbol=" << to_string(obj.symbol);
  out << ", " << "digits=" << to_string(obj.digits);
  out << ", " << "cmd=" << to_string(obj.cmd);
  out << ", " << "open_time=" << to_string(obj.open_time);
  out << ", " << "open_price=" << to_string(obj.open_price);
  out << ", " << "sl=" << to_string(obj.sl);
  out << ", " << "tp=" << to_string(obj.tp);
  out << ", " << "close_time=" << to_string(obj.close_time);
  out << ", " << "value_date=" << to_string(obj.value_date);
  out << ", " << "expiration=" << to_string(obj.expiration);
  out << ", " << "commission=" << to_string(obj.commission);
  out << ", " << "swap=" << to_string(obj.swap);
  out << ", " << "close_price=" << to_string(obj.close_price);
  out << ", " << "profit=" << to_string(obj.profit);
  out << ", " << "taxes=" << to_string(obj.taxes);
  out << ", " << "comment=" << to_string(obj.comment);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "volume=" << to_string(obj.volume);
  out << ")";
  return out;
}


MT4ConGroup::~MT4ConGroup() throw() {
}


void MT4ConGroup::__set_group(const std::string& val) {
  this->group = val;
}

void MT4ConGroup::__set_enable(const int32_t val) {
  this->enable = val;
}

void MT4ConGroup::__set_timeout(const int32_t val) {
  this->timeout = val;
}

void MT4ConGroup::__set_adv_security(const int32_t val) {
  this->adv_security = val;
}

void MT4ConGroup::__set_company(const std::string& val) {
  this->company = val;
}

void MT4ConGroup::__set_signature(const std::string& val) {
  this->signature = val;
}

void MT4ConGroup::__set_support_page(const std::string& val) {
  this->support_page = val;
}

void MT4ConGroup::__set_smtp_server(const std::string& val) {
  this->smtp_server = val;
}

void MT4ConGroup::__set_smtp_login(const std::string& val) {
  this->smtp_login = val;
}

void MT4ConGroup::__set_smtp_password(const std::string& val) {
  this->smtp_password = val;
}

void MT4ConGroup::__set_support_email(const std::string& val) {
  this->support_email = val;
}

void MT4ConGroup::__set_templates(const std::string& val) {
  this->templates = val;
}

void MT4ConGroup::__set_copies(const int32_t val) {
  this->copies = val;
}

void MT4ConGroup::__set_reports(const int32_t val) {
  this->reports = val;
}

void MT4ConGroup::__set_default_leverage(const int32_t val) {
  this->default_leverage = val;
}

void MT4ConGroup::__set_default_deposit(const double val) {
  this->default_deposit = val;
}

void MT4ConGroup::__set_currency(const std::string& val) {
  this->currency = val;
}

void MT4ConGroup::__set_credit(const double val) {
  this->credit = val;
}

void MT4ConGroup::__set_margin_call(const int32_t val) {
  this->margin_call = val;
}

void MT4ConGroup::__set_margin_mode(const int32_t val) {
  this->margin_mode = val;
}

void MT4ConGroup::__set_margin_stopout(const int32_t val) {
  this->margin_stopout = val;
}

void MT4ConGroup::__set_interestrate(const double val) {
  this->interestrate = val;
}

void MT4ConGroup::__set_use_swap(const int32_t val) {
  this->use_swap = val;
}

const char* MT4ConGroup::ascii_fingerprint = "EA052A0ECAA292848DFC92752ED4A386";
const uint8_t MT4ConGroup::binary_fingerprint[16] = {0xEA,0x05,0x2A,0x0E,0xCA,0xA2,0x92,0x84,0x8D,0xFC,0x92,0x75,0x2E,0xD4,0xA3,0x86};

uint32_t MT4ConGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeout);
          this->__isset.timeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adv_security);
          this->__isset.adv_security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->support_page);
          this->__isset.support_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->smtp_server);
          this->__isset.smtp_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->smtp_login);
          this->__isset.smtp_login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->smtp_password);
          this->__isset.smtp_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->support_email);
          this->__isset.support_email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->templates);
          this->__isset.templates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->copies);
          this->__isset.copies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reports);
          this->__isset.reports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->default_leverage);
          this->__isset.default_leverage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->default_deposit);
          this->__isset.default_deposit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->credit);
          this->__isset.credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->margin_call);
          this->__isset.margin_call = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->margin_mode);
          this->__isset.margin_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->margin_stopout);
          this->__isset.margin_stopout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->interestrate);
          this->__isset.interestrate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->use_swap);
          this->__isset.use_swap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4ConGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4ConGroup");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeout", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->timeout);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adv_security", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->adv_security);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("support_page", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->support_page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smtp_server", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->smtp_server);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smtp_login", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->smtp_login);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smtp_password", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->smtp_password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("support_email", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->support_email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("templates", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->templates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copies", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->copies);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reports", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->reports);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_leverage", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->default_leverage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_deposit", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->default_deposit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credit", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_call", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->margin_call);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_mode", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->margin_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_stopout", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->margin_stopout);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interestrate", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->interestrate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_swap", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->use_swap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4ConGroup &a, MT4ConGroup &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.enable, b.enable);
  swap(a.timeout, b.timeout);
  swap(a.adv_security, b.adv_security);
  swap(a.company, b.company);
  swap(a.signature, b.signature);
  swap(a.support_page, b.support_page);
  swap(a.smtp_server, b.smtp_server);
  swap(a.smtp_login, b.smtp_login);
  swap(a.smtp_password, b.smtp_password);
  swap(a.support_email, b.support_email);
  swap(a.templates, b.templates);
  swap(a.copies, b.copies);
  swap(a.reports, b.reports);
  swap(a.default_leverage, b.default_leverage);
  swap(a.default_deposit, b.default_deposit);
  swap(a.currency, b.currency);
  swap(a.credit, b.credit);
  swap(a.margin_call, b.margin_call);
  swap(a.margin_mode, b.margin_mode);
  swap(a.margin_stopout, b.margin_stopout);
  swap(a.interestrate, b.interestrate);
  swap(a.use_swap, b.use_swap);
  swap(a.__isset, b.__isset);
}

MT4ConGroup::MT4ConGroup(const MT4ConGroup& other14) {
  group = other14.group;
  enable = other14.enable;
  timeout = other14.timeout;
  adv_security = other14.adv_security;
  company = other14.company;
  signature = other14.signature;
  support_page = other14.support_page;
  smtp_server = other14.smtp_server;
  smtp_login = other14.smtp_login;
  smtp_password = other14.smtp_password;
  support_email = other14.support_email;
  templates = other14.templates;
  copies = other14.copies;
  reports = other14.reports;
  default_leverage = other14.default_leverage;
  default_deposit = other14.default_deposit;
  currency = other14.currency;
  credit = other14.credit;
  margin_call = other14.margin_call;
  margin_mode = other14.margin_mode;
  margin_stopout = other14.margin_stopout;
  interestrate = other14.interestrate;
  use_swap = other14.use_swap;
  __isset = other14.__isset;
}
MT4ConGroup& MT4ConGroup::operator=(const MT4ConGroup& other15) {
  group = other15.group;
  enable = other15.enable;
  timeout = other15.timeout;
  adv_security = other15.adv_security;
  company = other15.company;
  signature = other15.signature;
  support_page = other15.support_page;
  smtp_server = other15.smtp_server;
  smtp_login = other15.smtp_login;
  smtp_password = other15.smtp_password;
  support_email = other15.support_email;
  templates = other15.templates;
  copies = other15.copies;
  reports = other15.reports;
  default_leverage = other15.default_leverage;
  default_deposit = other15.default_deposit;
  currency = other15.currency;
  credit = other15.credit;
  margin_call = other15.margin_call;
  margin_mode = other15.margin_mode;
  margin_stopout = other15.margin_stopout;
  interestrate = other15.interestrate;
  use_swap = other15.use_swap;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4ConGroup& obj) {
  using apache::thrift::to_string;
  out << "MT4ConGroup(";
  out << "group=" << to_string(obj.group);
  out << ", " << "enable=" << to_string(obj.enable);
  out << ", " << "timeout=" << to_string(obj.timeout);
  out << ", " << "adv_security=" << to_string(obj.adv_security);
  out << ", " << "company=" << to_string(obj.company);
  out << ", " << "signature=" << to_string(obj.signature);
  out << ", " << "support_page=" << to_string(obj.support_page);
  out << ", " << "smtp_server=" << to_string(obj.smtp_server);
  out << ", " << "smtp_login=" << to_string(obj.smtp_login);
  out << ", " << "smtp_password=" << to_string(obj.smtp_password);
  out << ", " << "support_email=" << to_string(obj.support_email);
  out << ", " << "templates=" << to_string(obj.templates);
  out << ", " << "copies=" << to_string(obj.copies);
  out << ", " << "reports=" << to_string(obj.reports);
  out << ", " << "default_leverage=" << to_string(obj.default_leverage);
  out << ", " << "default_deposit=" << to_string(obj.default_deposit);
  out << ", " << "currency=" << to_string(obj.currency);
  out << ", " << "credit=" << to_string(obj.credit);
  out << ", " << "margin_call=" << to_string(obj.margin_call);
  out << ", " << "margin_mode=" << to_string(obj.margin_mode);
  out << ", " << "margin_stopout=" << to_string(obj.margin_stopout);
  out << ", " << "interestrate=" << to_string(obj.interestrate);
  out << ", " << "use_swap=" << to_string(obj.use_swap);
  out << ")";
  return out;
}


MT4ConSession::~MT4ConSession() throw() {
}


void MT4ConSession::__set_open_hour(const int16_t val) {
  this->open_hour = val;
}

void MT4ConSession::__set_open_min(const int16_t val) {
  this->open_min = val;
}

void MT4ConSession::__set_close_hour(const int16_t val) {
  this->close_hour = val;
}

void MT4ConSession::__set_close_min(const int16_t val) {
  this->close_min = val;
}

void MT4ConSession::__set_open(const int32_t val) {
  this->open = val;
}

void MT4ConSession::__set_close(const int32_t val) {
  this->close = val;
}

void MT4ConSession::__set_align(const std::vector<int16_t> & val) {
  this->align = val;
}

const char* MT4ConSession::ascii_fingerprint = "213C9641ACA2EBD5AF5397F20C2E6578";
const uint8_t MT4ConSession::binary_fingerprint[16] = {0x21,0x3C,0x96,0x41,0xAC,0xA2,0xEB,0xD5,0xAF,0x53,0x97,0xF2,0x0C,0x2E,0x65,0x78};

uint32_t MT4ConSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->open_hour);
          this->__isset.open_hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->open_min);
          this->__isset.open_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->close_hour);
          this->__isset.close_hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->close_min);
          this->__isset.close_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->open);
          this->__isset.open = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->close);
          this->__isset.close = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->align.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->align.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += iprot->readI16(this->align[_i20]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.align = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4ConSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4ConSession");

  xfer += oprot->writeFieldBegin("open_hour", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->open_hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_min", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->open_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_hour", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->close_hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_min", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->close_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->open);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->close);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("align", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->align.size()));
    std::vector<int16_t> ::const_iterator _iter21;
    for (_iter21 = this->align.begin(); _iter21 != this->align.end(); ++_iter21)
    {
      xfer += oprot->writeI16((*_iter21));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4ConSession &a, MT4ConSession &b) {
  using ::std::swap;
  swap(a.open_hour, b.open_hour);
  swap(a.open_min, b.open_min);
  swap(a.close_hour, b.close_hour);
  swap(a.close_min, b.close_min);
  swap(a.open, b.open);
  swap(a.close, b.close);
  swap(a.align, b.align);
  swap(a.__isset, b.__isset);
}

MT4ConSession::MT4ConSession(const MT4ConSession& other22) {
  open_hour = other22.open_hour;
  open_min = other22.open_min;
  close_hour = other22.close_hour;
  close_min = other22.close_min;
  open = other22.open;
  close = other22.close;
  align = other22.align;
  __isset = other22.__isset;
}
MT4ConSession& MT4ConSession::operator=(const MT4ConSession& other23) {
  open_hour = other23.open_hour;
  open_min = other23.open_min;
  close_hour = other23.close_hour;
  close_min = other23.close_min;
  open = other23.open;
  close = other23.close;
  align = other23.align;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4ConSession& obj) {
  using apache::thrift::to_string;
  out << "MT4ConSession(";
  out << "open_hour=" << to_string(obj.open_hour);
  out << ", " << "open_min=" << to_string(obj.open_min);
  out << ", " << "close_hour=" << to_string(obj.close_hour);
  out << ", " << "close_min=" << to_string(obj.close_min);
  out << ", " << "open=" << to_string(obj.open);
  out << ", " << "close=" << to_string(obj.close);
  out << ", " << "align=" << to_string(obj.align);
  out << ")";
  return out;
}


MT4ConSessions::~MT4ConSessions() throw() {
}


void MT4ConSessions::__set_quote(const std::vector<MT4ConSession> & val) {
  this->quote = val;
}

void MT4ConSessions::__set_trade(const std::vector<MT4ConSession> & val) {
  this->trade = val;
}

void MT4ConSessions::__set_quote_overnight(const int32_t val) {
  this->quote_overnight = val;
}

void MT4ConSessions::__set_trade_overnight(const int32_t val) {
  this->trade_overnight = val;
}

const char* MT4ConSessions::ascii_fingerprint = "C2C0D57C694C00F4EBDC80F65D208E78";
const uint8_t MT4ConSessions::binary_fingerprint[16] = {0xC2,0xC0,0xD5,0x7C,0x69,0x4C,0x00,0xF4,0xEB,0xDC,0x80,0xF6,0x5D,0x20,0x8E,0x78};

uint32_t MT4ConSessions::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->quote.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->quote.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->quote[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.quote = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trade.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->trade.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += this->trade[_i33].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.trade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->quote_overnight);
          this->__isset.quote_overnight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trade_overnight);
          this->__isset.trade_overnight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4ConSessions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4ConSessions");

  xfer += oprot->writeFieldBegin("quote", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->quote.size()));
    std::vector<MT4ConSession> ::const_iterator _iter34;
    for (_iter34 = this->quote.begin(); _iter34 != this->quote.end(); ++_iter34)
    {
      xfer += (*_iter34).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trade", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->trade.size()));
    std::vector<MT4ConSession> ::const_iterator _iter35;
    for (_iter35 = this->trade.begin(); _iter35 != this->trade.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quote_overnight", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->quote_overnight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trade_overnight", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->trade_overnight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4ConSessions &a, MT4ConSessions &b) {
  using ::std::swap;
  swap(a.quote, b.quote);
  swap(a.trade, b.trade);
  swap(a.quote_overnight, b.quote_overnight);
  swap(a.trade_overnight, b.trade_overnight);
  swap(a.__isset, b.__isset);
}

MT4ConSessions::MT4ConSessions(const MT4ConSessions& other36) {
  quote = other36.quote;
  trade = other36.trade;
  quote_overnight = other36.quote_overnight;
  trade_overnight = other36.trade_overnight;
  __isset = other36.__isset;
}
MT4ConSessions& MT4ConSessions::operator=(const MT4ConSessions& other37) {
  quote = other37.quote;
  trade = other37.trade;
  quote_overnight = other37.quote_overnight;
  trade_overnight = other37.trade_overnight;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4ConSessions& obj) {
  using apache::thrift::to_string;
  out << "MT4ConSessions(";
  out << "quote=" << to_string(obj.quote);
  out << ", " << "trade=" << to_string(obj.trade);
  out << ", " << "quote_overnight=" << to_string(obj.quote_overnight);
  out << ", " << "trade_overnight=" << to_string(obj.trade_overnight);
  out << ")";
  return out;
}


MT4ConSymbol::~MT4ConSymbol() throw() {
}


void MT4ConSymbol::__set_bid_tickvalue(const double val) {
  this->bid_tickvalue = val;
}

void MT4ConSymbol::__set_ask_tickvalue(const double val) {
  this->ask_tickvalue = val;
}

void MT4ConSymbol::__set_symbol(const std::string& val) {
  this->symbol = val;
}

void MT4ConSymbol::__set_description(const std::string& val) {
  this->description = val;
}

void MT4ConSymbol::__set_source(const std::string& val) {
  this->source = val;
}

void MT4ConSymbol::__set_currency(const std::string& val) {
  this->currency = val;
}

void MT4ConSymbol::__set_type(const int32_t val) {
  this->type = val;
}

void MT4ConSymbol::__set_digits(const int32_t val) {
  this->digits = val;
}

void MT4ConSymbol::__set_trade(const int32_t val) {
  this->trade = val;
}

void MT4ConSymbol::__set_count(const int32_t val) {
  this->count = val;
}

void MT4ConSymbol::__set_count_original(const int32_t val) {
  this->count_original = val;
}

void MT4ConSymbol::__set_realtime(const int32_t val) {
  this->realtime = val;
}

void MT4ConSymbol::__set_starting(const int64_t val) {
  this->starting = val;
}

void MT4ConSymbol::__set_expiration(const int64_t val) {
  this->expiration = val;
}

void MT4ConSymbol::__set_sessions(const std::vector<MT4ConSessions> & val) {
  this->sessions = val;
}

void MT4ConSymbol::__set_profit_mode(const int32_t val) {
  this->profit_mode = val;
}

void MT4ConSymbol::__set_profit_reserved(const int32_t val) {
  this->profit_reserved = val;
}

void MT4ConSymbol::__set_filter(const int32_t val) {
  this->filter = val;
}

void MT4ConSymbol::__set_filter_counter(const int32_t val) {
  this->filter_counter = val;
}

void MT4ConSymbol::__set_filter_limit(const double val) {
  this->filter_limit = val;
}

void MT4ConSymbol::__set_filter_smoothing(const int32_t val) {
  this->filter_smoothing = val;
}

void MT4ConSymbol::__set_filter_reserved(const double val) {
  this->filter_reserved = val;
}

void MT4ConSymbol::__set_logging(const int32_t val) {
  this->logging = val;
}

void MT4ConSymbol::__set_spread(const int32_t val) {
  this->spread = val;
}

void MT4ConSymbol::__set_spread_balance(const int32_t val) {
  this->spread_balance = val;
}

void MT4ConSymbol::__set_exemode(const int32_t val) {
  this->exemode = val;
}

void MT4ConSymbol::__set_swap_enable(const int32_t val) {
  this->swap_enable = val;
}

void MT4ConSymbol::__set_swap_type(const int32_t val) {
  this->swap_type = val;
}

void MT4ConSymbol::__set_swap_long(const double val) {
  this->swap_long = val;
}

void MT4ConSymbol::__set_swap_short(const double val) {
  this->swap_short = val;
}

void MT4ConSymbol::__set_swap_rollover3days(const int32_t val) {
  this->swap_rollover3days = val;
}

void MT4ConSymbol::__set_contract_size(const double val) {
  this->contract_size = val;
}

void MT4ConSymbol::__set_tick_value(const double val) {
  this->tick_value = val;
}

void MT4ConSymbol::__set_tick_size(const double val) {
  this->tick_size = val;
}

void MT4ConSymbol::__set_stops_level(const int32_t val) {
  this->stops_level = val;
}

void MT4ConSymbol::__set_gtc_pendings(const int32_t val) {
  this->gtc_pendings = val;
}

void MT4ConSymbol::__set_margin_mode(const int32_t val) {
  this->margin_mode = val;
}

void MT4ConSymbol::__set_margin_initial(const double val) {
  this->margin_initial = val;
}

void MT4ConSymbol::__set_margin_maintenance(const double val) {
  this->margin_maintenance = val;
}

void MT4ConSymbol::__set_margin_hedged(const double val) {
  this->margin_hedged = val;
}

void MT4ConSymbol::__set_margin_divider(const double val) {
  this->margin_divider = val;
}

void MT4ConSymbol::__set_point(const double val) {
  this->point = val;
}

void MT4ConSymbol::__set_multiply(const double val) {
  this->multiply = val;
}

void MT4ConSymbol::__set_long_only(const int32_t val) {
  this->long_only = val;
}

void MT4ConSymbol::__set_instant_max_volume(const int32_t val) {
  this->instant_max_volume = val;
}

void MT4ConSymbol::__set_margin_currency(const std::string& val) {
  this->margin_currency = val;
}

void MT4ConSymbol::__set_freeze_level(const int32_t val) {
  this->freeze_level = val;
}

void MT4ConSymbol::__set_margin_hedged_strong(const int32_t val) {
  this->margin_hedged_strong = val;
}

void MT4ConSymbol::__set_value_date(const int64_t val) {
  this->value_date = val;
}

void MT4ConSymbol::__set_quotes_delay(const int32_t val) {
  this->quotes_delay = val;
}

void MT4ConSymbol::__set_swap_openprice(const int32_t val) {
  this->swap_openprice = val;
}

const char* MT4ConSymbol::ascii_fingerprint = "FFA48ACB2D6DBB6DD767A1658360B8D2";
const uint8_t MT4ConSymbol::binary_fingerprint[16] = {0xFF,0xA4,0x8A,0xCB,0x2D,0x6D,0xBB,0x6D,0xD7,0x67,0xA1,0x65,0x83,0x60,0xB8,0xD2};

uint32_t MT4ConSymbol::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bid_tickvalue);
          this->__isset.bid_tickvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ask_tickvalue);
          this->__isset.ask_tickvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->symbol);
          this->__isset.symbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->digits);
          this->__isset.digits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trade);
          this->__isset.trade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_original);
          this->__isset.count_original = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->realtime);
          this->__isset.realtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->starting);
          this->__isset.starting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          this->__isset.expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sessions.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->sessions.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += this->sessions[_i42].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sessions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->profit_mode);
          this->__isset.profit_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->profit_reserved);
          this->__isset.profit_reserved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->filter);
          this->__isset.filter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->filter_counter);
          this->__isset.filter_counter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->filter_limit);
          this->__isset.filter_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->filter_smoothing);
          this->__isset.filter_smoothing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->filter_reserved);
          this->__isset.filter_reserved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logging);
          this->__isset.logging = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spread);
          this->__isset.spread = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spread_balance);
          this->__isset.spread_balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exemode);
          this->__isset.exemode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->swap_enable);
          this->__isset.swap_enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->swap_type);
          this->__isset.swap_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->swap_long);
          this->__isset.swap_long = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->swap_short);
          this->__isset.swap_short = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->swap_rollover3days);
          this->__isset.swap_rollover3days = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->contract_size);
          this->__isset.contract_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tick_value);
          this->__isset.tick_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tick_size);
          this->__isset.tick_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stops_level);
          this->__isset.stops_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gtc_pendings);
          this->__isset.gtc_pendings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->margin_mode);
          this->__isset.margin_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->margin_initial);
          this->__isset.margin_initial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->margin_maintenance);
          this->__isset.margin_maintenance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->margin_hedged);
          this->__isset.margin_hedged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->margin_divider);
          this->__isset.margin_divider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->point);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->multiply);
          this->__isset.multiply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->long_only);
          this->__isset.long_only = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->instant_max_volume);
          this->__isset.instant_max_volume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->margin_currency);
          this->__isset.margin_currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeze_level);
          this->__isset.freeze_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->margin_hedged_strong);
          this->__isset.margin_hedged_strong = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value_date);
          this->__isset.value_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->quotes_delay);
          this->__isset.quotes_delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->swap_openprice);
          this->__isset.swap_openprice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4ConSymbol::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4ConSymbol");

  xfer += oprot->writeFieldBegin("bid_tickvalue", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->bid_tickvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ask_tickvalue", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->ask_tickvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("symbol", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->symbol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("digits", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->digits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trade", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->trade);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count_original", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->count_original);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("realtime", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->realtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("starting", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->starting);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessions", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sessions.size()));
    std::vector<MT4ConSessions> ::const_iterator _iter43;
    for (_iter43 = this->sessions.begin(); _iter43 != this->sessions.end(); ++_iter43)
    {
      xfer += (*_iter43).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profit_mode", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->profit_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profit_reserved", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->profit_reserved);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->filter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter_counter", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->filter_counter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter_limit", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->filter_limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter_smoothing", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->filter_smoothing);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter_reserved", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->filter_reserved);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logging", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->logging);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spread", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->spread);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spread_balance", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->spread_balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exemode", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->exemode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_enable", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->swap_enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_type", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->swap_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_long", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->swap_long);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_short", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->swap_short);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_rollover3days", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->swap_rollover3days);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contract_size", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->contract_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tick_value", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->tick_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tick_size", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->tick_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stops_level", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->stops_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gtc_pendings", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->gtc_pendings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_mode", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->margin_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_initial", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->margin_initial);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_maintenance", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->margin_maintenance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_hedged", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->margin_hedged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_divider", ::apache::thrift::protocol::T_DOUBLE, 41);
  xfer += oprot->writeDouble(this->margin_divider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_DOUBLE, 42);
  xfer += oprot->writeDouble(this->point);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("multiply", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->multiply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("long_only", ::apache::thrift::protocol::T_I32, 44);
  xfer += oprot->writeI32(this->long_only);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("instant_max_volume", ::apache::thrift::protocol::T_I32, 45);
  xfer += oprot->writeI32(this->instant_max_volume);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_currency", ::apache::thrift::protocol::T_STRING, 46);
  xfer += oprot->writeString(this->margin_currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeze_level", ::apache::thrift::protocol::T_I32, 47);
  xfer += oprot->writeI32(this->freeze_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("margin_hedged_strong", ::apache::thrift::protocol::T_I32, 48);
  xfer += oprot->writeI32(this->margin_hedged_strong);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_date", ::apache::thrift::protocol::T_I64, 49);
  xfer += oprot->writeI64(this->value_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quotes_delay", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->quotes_delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swap_openprice", ::apache::thrift::protocol::T_I32, 51);
  xfer += oprot->writeI32(this->swap_openprice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4ConSymbol &a, MT4ConSymbol &b) {
  using ::std::swap;
  swap(a.bid_tickvalue, b.bid_tickvalue);
  swap(a.ask_tickvalue, b.ask_tickvalue);
  swap(a.symbol, b.symbol);
  swap(a.description, b.description);
  swap(a.source, b.source);
  swap(a.currency, b.currency);
  swap(a.type, b.type);
  swap(a.digits, b.digits);
  swap(a.trade, b.trade);
  swap(a.count, b.count);
  swap(a.count_original, b.count_original);
  swap(a.realtime, b.realtime);
  swap(a.starting, b.starting);
  swap(a.expiration, b.expiration);
  swap(a.sessions, b.sessions);
  swap(a.profit_mode, b.profit_mode);
  swap(a.profit_reserved, b.profit_reserved);
  swap(a.filter, b.filter);
  swap(a.filter_counter, b.filter_counter);
  swap(a.filter_limit, b.filter_limit);
  swap(a.filter_smoothing, b.filter_smoothing);
  swap(a.filter_reserved, b.filter_reserved);
  swap(a.logging, b.logging);
  swap(a.spread, b.spread);
  swap(a.spread_balance, b.spread_balance);
  swap(a.exemode, b.exemode);
  swap(a.swap_enable, b.swap_enable);
  swap(a.swap_type, b.swap_type);
  swap(a.swap_long, b.swap_long);
  swap(a.swap_short, b.swap_short);
  swap(a.swap_rollover3days, b.swap_rollover3days);
  swap(a.contract_size, b.contract_size);
  swap(a.tick_value, b.tick_value);
  swap(a.tick_size, b.tick_size);
  swap(a.stops_level, b.stops_level);
  swap(a.gtc_pendings, b.gtc_pendings);
  swap(a.margin_mode, b.margin_mode);
  swap(a.margin_initial, b.margin_initial);
  swap(a.margin_maintenance, b.margin_maintenance);
  swap(a.margin_hedged, b.margin_hedged);
  swap(a.margin_divider, b.margin_divider);
  swap(a.point, b.point);
  swap(a.multiply, b.multiply);
  swap(a.long_only, b.long_only);
  swap(a.instant_max_volume, b.instant_max_volume);
  swap(a.margin_currency, b.margin_currency);
  swap(a.freeze_level, b.freeze_level);
  swap(a.margin_hedged_strong, b.margin_hedged_strong);
  swap(a.value_date, b.value_date);
  swap(a.quotes_delay, b.quotes_delay);
  swap(a.swap_openprice, b.swap_openprice);
  swap(a.__isset, b.__isset);
}

MT4ConSymbol::MT4ConSymbol(const MT4ConSymbol& other44) {
  bid_tickvalue = other44.bid_tickvalue;
  ask_tickvalue = other44.ask_tickvalue;
  symbol = other44.symbol;
  description = other44.description;
  source = other44.source;
  currency = other44.currency;
  type = other44.type;
  digits = other44.digits;
  trade = other44.trade;
  count = other44.count;
  count_original = other44.count_original;
  realtime = other44.realtime;
  starting = other44.starting;
  expiration = other44.expiration;
  sessions = other44.sessions;
  profit_mode = other44.profit_mode;
  profit_reserved = other44.profit_reserved;
  filter = other44.filter;
  filter_counter = other44.filter_counter;
  filter_limit = other44.filter_limit;
  filter_smoothing = other44.filter_smoothing;
  filter_reserved = other44.filter_reserved;
  logging = other44.logging;
  spread = other44.spread;
  spread_balance = other44.spread_balance;
  exemode = other44.exemode;
  swap_enable = other44.swap_enable;
  swap_type = other44.swap_type;
  swap_long = other44.swap_long;
  swap_short = other44.swap_short;
  swap_rollover3days = other44.swap_rollover3days;
  contract_size = other44.contract_size;
  tick_value = other44.tick_value;
  tick_size = other44.tick_size;
  stops_level = other44.stops_level;
  gtc_pendings = other44.gtc_pendings;
  margin_mode = other44.margin_mode;
  margin_initial = other44.margin_initial;
  margin_maintenance = other44.margin_maintenance;
  margin_hedged = other44.margin_hedged;
  margin_divider = other44.margin_divider;
  point = other44.point;
  multiply = other44.multiply;
  long_only = other44.long_only;
  instant_max_volume = other44.instant_max_volume;
  margin_currency = other44.margin_currency;
  freeze_level = other44.freeze_level;
  margin_hedged_strong = other44.margin_hedged_strong;
  value_date = other44.value_date;
  quotes_delay = other44.quotes_delay;
  swap_openprice = other44.swap_openprice;
  __isset = other44.__isset;
}
MT4ConSymbol& MT4ConSymbol::operator=(const MT4ConSymbol& other45) {
  bid_tickvalue = other45.bid_tickvalue;
  ask_tickvalue = other45.ask_tickvalue;
  symbol = other45.symbol;
  description = other45.description;
  source = other45.source;
  currency = other45.currency;
  type = other45.type;
  digits = other45.digits;
  trade = other45.trade;
  count = other45.count;
  count_original = other45.count_original;
  realtime = other45.realtime;
  starting = other45.starting;
  expiration = other45.expiration;
  sessions = other45.sessions;
  profit_mode = other45.profit_mode;
  profit_reserved = other45.profit_reserved;
  filter = other45.filter;
  filter_counter = other45.filter_counter;
  filter_limit = other45.filter_limit;
  filter_smoothing = other45.filter_smoothing;
  filter_reserved = other45.filter_reserved;
  logging = other45.logging;
  spread = other45.spread;
  spread_balance = other45.spread_balance;
  exemode = other45.exemode;
  swap_enable = other45.swap_enable;
  swap_type = other45.swap_type;
  swap_long = other45.swap_long;
  swap_short = other45.swap_short;
  swap_rollover3days = other45.swap_rollover3days;
  contract_size = other45.contract_size;
  tick_value = other45.tick_value;
  tick_size = other45.tick_size;
  stops_level = other45.stops_level;
  gtc_pendings = other45.gtc_pendings;
  margin_mode = other45.margin_mode;
  margin_initial = other45.margin_initial;
  margin_maintenance = other45.margin_maintenance;
  margin_hedged = other45.margin_hedged;
  margin_divider = other45.margin_divider;
  point = other45.point;
  multiply = other45.multiply;
  long_only = other45.long_only;
  instant_max_volume = other45.instant_max_volume;
  margin_currency = other45.margin_currency;
  freeze_level = other45.freeze_level;
  margin_hedged_strong = other45.margin_hedged_strong;
  value_date = other45.value_date;
  quotes_delay = other45.quotes_delay;
  swap_openprice = other45.swap_openprice;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4ConSymbol& obj) {
  using apache::thrift::to_string;
  out << "MT4ConSymbol(";
  out << "bid_tickvalue=" << to_string(obj.bid_tickvalue);
  out << ", " << "ask_tickvalue=" << to_string(obj.ask_tickvalue);
  out << ", " << "symbol=" << to_string(obj.symbol);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "source=" << to_string(obj.source);
  out << ", " << "currency=" << to_string(obj.currency);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "digits=" << to_string(obj.digits);
  out << ", " << "trade=" << to_string(obj.trade);
  out << ", " << "count=" << to_string(obj.count);
  out << ", " << "count_original=" << to_string(obj.count_original);
  out << ", " << "realtime=" << to_string(obj.realtime);
  out << ", " << "starting=" << to_string(obj.starting);
  out << ", " << "expiration=" << to_string(obj.expiration);
  out << ", " << "sessions=" << to_string(obj.sessions);
  out << ", " << "profit_mode=" << to_string(obj.profit_mode);
  out << ", " << "profit_reserved=" << to_string(obj.profit_reserved);
  out << ", " << "filter=" << to_string(obj.filter);
  out << ", " << "filter_counter=" << to_string(obj.filter_counter);
  out << ", " << "filter_limit=" << to_string(obj.filter_limit);
  out << ", " << "filter_smoothing=" << to_string(obj.filter_smoothing);
  out << ", " << "filter_reserved=" << to_string(obj.filter_reserved);
  out << ", " << "logging=" << to_string(obj.logging);
  out << ", " << "spread=" << to_string(obj.spread);
  out << ", " << "spread_balance=" << to_string(obj.spread_balance);
  out << ", " << "exemode=" << to_string(obj.exemode);
  out << ", " << "swap_enable=" << to_string(obj.swap_enable);
  out << ", " << "swap_type=" << to_string(obj.swap_type);
  out << ", " << "swap_long=" << to_string(obj.swap_long);
  out << ", " << "swap_short=" << to_string(obj.swap_short);
  out << ", " << "swap_rollover3days=" << to_string(obj.swap_rollover3days);
  out << ", " << "contract_size=" << to_string(obj.contract_size);
  out << ", " << "tick_value=" << to_string(obj.tick_value);
  out << ", " << "tick_size=" << to_string(obj.tick_size);
  out << ", " << "stops_level=" << to_string(obj.stops_level);
  out << ", " << "gtc_pendings=" << to_string(obj.gtc_pendings);
  out << ", " << "margin_mode=" << to_string(obj.margin_mode);
  out << ", " << "margin_initial=" << to_string(obj.margin_initial);
  out << ", " << "margin_maintenance=" << to_string(obj.margin_maintenance);
  out << ", " << "margin_hedged=" << to_string(obj.margin_hedged);
  out << ", " << "margin_divider=" << to_string(obj.margin_divider);
  out << ", " << "point=" << to_string(obj.point);
  out << ", " << "multiply=" << to_string(obj.multiply);
  out << ", " << "long_only=" << to_string(obj.long_only);
  out << ", " << "instant_max_volume=" << to_string(obj.instant_max_volume);
  out << ", " << "margin_currency=" << to_string(obj.margin_currency);
  out << ", " << "freeze_level=" << to_string(obj.freeze_level);
  out << ", " << "margin_hedged_strong=" << to_string(obj.margin_hedged_strong);
  out << ", " << "value_date=" << to_string(obj.value_date);
  out << ", " << "quotes_delay=" << to_string(obj.quotes_delay);
  out << ", " << "swap_openprice=" << to_string(obj.swap_openprice);
  out << ")";
  return out;
}


MT4ChartInfo::~MT4ChartInfo() throw() {
}


void MT4ChartInfo::__set_symbol(const std::string& val) {
  this->symbol = val;
}

void MT4ChartInfo::__set_period(const MT4PERIOD_TYPE::type val) {
  this->period = val;
}

void MT4ChartInfo::__set_start(const int64_t val) {
  this->start = val;
}

void MT4ChartInfo::__set__end(const int64_t val) {
  this->_end = val;
}

void MT4ChartInfo::__set_timesign(const int64_t val) {
  this->timesign = val;
}

void MT4ChartInfo::__set_mode(const MT4CHART_TYPE::type val) {
  this->mode = val;
}

const char* MT4ChartInfo::ascii_fingerprint = "4DEDD3345AAC78DE99F5136DFBFE7C49";
const uint8_t MT4ChartInfo::binary_fingerprint[16] = {0x4D,0xED,0xD3,0x34,0x5A,0xAC,0x78,0xDE,0x99,0xF5,0x13,0x6D,0xFB,0xFE,0x7C,0x49};

uint32_t MT4ChartInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->symbol);
          this->__isset.symbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast46;
          xfer += iprot->readI32(ecast46);
          this->period = (MT4PERIOD_TYPE::type)ecast46;
          this->__isset.period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_end);
          this->__isset._end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timesign);
          this->__isset.timesign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->mode = (MT4CHART_TYPE::type)ecast47;
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4ChartInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4ChartInfo");

  xfer += oprot->writeFieldBegin("symbol", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->symbol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("period", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->period);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_end", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timesign", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timesign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4ChartInfo &a, MT4ChartInfo &b) {
  using ::std::swap;
  swap(a.symbol, b.symbol);
  swap(a.period, b.period);
  swap(a.start, b.start);
  swap(a._end, b._end);
  swap(a.timesign, b.timesign);
  swap(a.mode, b.mode);
  swap(a.__isset, b.__isset);
}

MT4ChartInfo::MT4ChartInfo(const MT4ChartInfo& other48) {
  symbol = other48.symbol;
  period = other48.period;
  start = other48.start;
  _end = other48._end;
  timesign = other48.timesign;
  mode = other48.mode;
  __isset = other48.__isset;
}
MT4ChartInfo& MT4ChartInfo::operator=(const MT4ChartInfo& other49) {
  symbol = other49.symbol;
  period = other49.period;
  start = other49.start;
  _end = other49._end;
  timesign = other49.timesign;
  mode = other49.mode;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4ChartInfo& obj) {
  using apache::thrift::to_string;
  out << "MT4ChartInfo(";
  out << "symbol=" << to_string(obj.symbol);
  out << ", " << "period=" << to_string(obj.period);
  out << ", " << "start=" << to_string(obj.start);
  out << ", " << "_end=" << to_string(obj._end);
  out << ", " << "timesign=" << to_string(obj.timesign);
  out << ", " << "mode=" << to_string(obj.mode);
  out << ")";
  return out;
}


MT4RateInfo::~MT4RateInfo() throw() {
}


void MT4RateInfo::__set_ctm(const int64_t val) {
  this->ctm = val;
}

void MT4RateInfo::__set_open(const double val) {
  this->open = val;
}

void MT4RateInfo::__set_high(const double val) {
  this->high = val;
}

void MT4RateInfo::__set_low(const double val) {
  this->low = val;
}

void MT4RateInfo::__set_close(const double val) {
  this->close = val;
}

void MT4RateInfo::__set_vol(const double val) {
  this->vol = val;
}

const char* MT4RateInfo::ascii_fingerprint = "F1BCEC691A65E682BA32A59F3F019AD1";
const uint8_t MT4RateInfo::binary_fingerprint[16] = {0xF1,0xBC,0xEC,0x69,0x1A,0x65,0xE6,0x82,0xBA,0x32,0xA5,0x9F,0x3F,0x01,0x9A,0xD1};

uint32_t MT4RateInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ctm);
          this->__isset.ctm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->open);
          this->__isset.open = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->high);
          this->__isset.high = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->low);
          this->__isset.low = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->close);
          this->__isset.close = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vol);
          this->__isset.vol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MT4RateInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MT4RateInfo");

  xfer += oprot->writeFieldBegin("ctm", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ctm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->open);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("high", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->high);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("low", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->low);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->close);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vol", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->vol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MT4RateInfo &a, MT4RateInfo &b) {
  using ::std::swap;
  swap(a.ctm, b.ctm);
  swap(a.open, b.open);
  swap(a.high, b.high);
  swap(a.low, b.low);
  swap(a.close, b.close);
  swap(a.vol, b.vol);
  swap(a.__isset, b.__isset);
}

MT4RateInfo::MT4RateInfo(const MT4RateInfo& other50) {
  ctm = other50.ctm;
  open = other50.open;
  high = other50.high;
  low = other50.low;
  close = other50.close;
  vol = other50.vol;
  __isset = other50.__isset;
}
MT4RateInfo& MT4RateInfo::operator=(const MT4RateInfo& other51) {
  ctm = other51.ctm;
  open = other51.open;
  high = other51.high;
  low = other51.low;
  close = other51.close;
  vol = other51.vol;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MT4RateInfo& obj) {
  using apache::thrift::to_string;
  out << "MT4RateInfo(";
  out << "ctm=" << to_string(obj.ctm);
  out << ", " << "open=" << to_string(obj.open);
  out << ", " << "high=" << to_string(obj.high);
  out << ", " << "low=" << to_string(obj.low);
  out << ", " << "close=" << to_string(obj.close);
  out << ", " << "vol=" << to_string(obj.vol);
  out << ")";
  return out;
}


