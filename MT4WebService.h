/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MT4WebService_H
#define MT4WebService_H

#include <thrift/TDispatchProcessor.h>
#include "MT4WebService_types.h"



class MT4WebServiceIf {
 public:
  virtual ~MT4WebServiceIf() {}
  virtual void getAllUserRecord(std::vector<MT4UserRecord> & _return) = 0;
  virtual void getUserRecordByLogin(MT4UserRecord& _return, const int32_t login) = 0;
  virtual int32_t addUser(const MT4UserRecord& mur) = 0;
  virtual bool groupOperation(const MT4GroupCommand& mgc) = 0;
  virtual bool balance(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment) = 0;
  virtual bool credit(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment, const int64_t ExpirationDayTimestamp) = 0;
  virtual bool changePassword(const int32_t login, const std::string& password, const MT4PASSWORD_TYPE::type p_type, const std::string& new_password) = 0;
  virtual void getTradesHistoryByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login, const int64_t fromTimeStamp, const int64_t toTimeStamp) = 0;
  virtual void getOngingTradesByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login) = 0;
  virtual void getAllOngoingTrades(std::vector<MT4TradeRecord> & _return) = 0;
  virtual void symbolDetail(MT4ConSymbol& _return, const std::string& symbol) = 0;
  virtual void getHistoryChartData(std::vector<MT4RateInfo> & _return, const MT4ChartInfo& chartInfo) = 0;
  virtual void getAllGroups(std::vector<MT4ConGroup> & _return) = 0;
  virtual void testSayHi() = 0;
};

class MT4WebServiceIfFactory {
 public:
  typedef MT4WebServiceIf Handler;

  virtual ~MT4WebServiceIfFactory() {}

  virtual MT4WebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MT4WebServiceIf* /* handler */) = 0;
};

class MT4WebServiceIfSingletonFactory : virtual public MT4WebServiceIfFactory {
 public:
  MT4WebServiceIfSingletonFactory(const boost::shared_ptr<MT4WebServiceIf>& iface) : iface_(iface) {}
  virtual ~MT4WebServiceIfSingletonFactory() {}

  virtual MT4WebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MT4WebServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MT4WebServiceIf> iface_;
};

class MT4WebServiceNull : virtual public MT4WebServiceIf {
 public:
  virtual ~MT4WebServiceNull() {}
  void getAllUserRecord(std::vector<MT4UserRecord> & /* _return */) {
    return;
  }
  void getUserRecordByLogin(MT4UserRecord& /* _return */, const int32_t /* login */) {
    return;
  }
  int32_t addUser(const MT4UserRecord& /* mur */) {
    int32_t _return = 0;
    return _return;
  }
  bool groupOperation(const MT4GroupCommand& /* mgc */) {
    bool _return = false;
    return _return;
  }
  bool balance(const int32_t /* login */, const double /* money */, const MT4DEAL_TYPE::type /* type */, const std::string& /* comment */) {
    bool _return = false;
    return _return;
  }
  bool credit(const int32_t /* login */, const double /* money */, const MT4DEAL_TYPE::type /* type */, const std::string& /* comment */, const int64_t /* ExpirationDayTimestamp */) {
    bool _return = false;
    return _return;
  }
  bool changePassword(const int32_t /* login */, const std::string& /* password */, const MT4PASSWORD_TYPE::type /* p_type */, const std::string& /* new_password */) {
    bool _return = false;
    return _return;
  }
  void getTradesHistoryByLogin(std::vector<MT4TradeRecord> & /* _return */, const int32_t /* login */, const int64_t /* fromTimeStamp */, const int64_t /* toTimeStamp */) {
    return;
  }
  void getOngingTradesByLogin(std::vector<MT4TradeRecord> & /* _return */, const int32_t /* login */) {
    return;
  }
  void getAllOngoingTrades(std::vector<MT4TradeRecord> & /* _return */) {
    return;
  }
  void symbolDetail(MT4ConSymbol& /* _return */, const std::string& /* symbol */) {
    return;
  }
  void getHistoryChartData(std::vector<MT4RateInfo> & /* _return */, const MT4ChartInfo& /* chartInfo */) {
    return;
  }
  void getAllGroups(std::vector<MT4ConGroup> & /* _return */) {
    return;
  }
  void testSayHi() {
    return;
  }
};


class MT4WebService_getAllUserRecord_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MT4WebService_getAllUserRecord_args(const MT4WebService_getAllUserRecord_args&);
  MT4WebService_getAllUserRecord_args& operator=(const MT4WebService_getAllUserRecord_args&);
  MT4WebService_getAllUserRecord_args() {
  }

  virtual ~MT4WebService_getAllUserRecord_args() throw();

  bool operator == (const MT4WebService_getAllUserRecord_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MT4WebService_getAllUserRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllUserRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllUserRecord_args& obj);
};


class MT4WebService_getAllUserRecord_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MT4WebService_getAllUserRecord_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllUserRecord_pargs& obj);
};

typedef struct _MT4WebService_getAllUserRecord_result__isset {
  _MT4WebService_getAllUserRecord_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllUserRecord_result__isset;

class MT4WebService_getAllUserRecord_result {
 public:

  static const char* ascii_fingerprint; // = "C6F890D70BF5868A5CDBC2E710F23831";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xF8,0x90,0xD7,0x0B,0xF5,0x86,0x8A,0x5C,0xDB,0xC2,0xE7,0x10,0xF2,0x38,0x31};

  MT4WebService_getAllUserRecord_result(const MT4WebService_getAllUserRecord_result&);
  MT4WebService_getAllUserRecord_result& operator=(const MT4WebService_getAllUserRecord_result&);
  MT4WebService_getAllUserRecord_result() {
  }

  virtual ~MT4WebService_getAllUserRecord_result() throw();
  std::vector<MT4UserRecord>  success;

  _MT4WebService_getAllUserRecord_result__isset __isset;

  void __set_success(const std::vector<MT4UserRecord> & val);

  bool operator == (const MT4WebService_getAllUserRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getAllUserRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllUserRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllUserRecord_result& obj);
};

typedef struct _MT4WebService_getAllUserRecord_presult__isset {
  _MT4WebService_getAllUserRecord_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllUserRecord_presult__isset;

class MT4WebService_getAllUserRecord_presult {
 public:

  static const char* ascii_fingerprint; // = "C6F890D70BF5868A5CDBC2E710F23831";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xF8,0x90,0xD7,0x0B,0xF5,0x86,0x8A,0x5C,0xDB,0xC2,0xE7,0x10,0xF2,0x38,0x31};


  virtual ~MT4WebService_getAllUserRecord_presult() throw();
  std::vector<MT4UserRecord> * success;

  _MT4WebService_getAllUserRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllUserRecord_presult& obj);
};

typedef struct _MT4WebService_getUserRecordByLogin_args__isset {
  _MT4WebService_getUserRecordByLogin_args__isset() : login(false) {}
  bool login :1;
} _MT4WebService_getUserRecordByLogin_args__isset;

class MT4WebService_getUserRecordByLogin_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MT4WebService_getUserRecordByLogin_args(const MT4WebService_getUserRecordByLogin_args&);
  MT4WebService_getUserRecordByLogin_args& operator=(const MT4WebService_getUserRecordByLogin_args&);
  MT4WebService_getUserRecordByLogin_args() : login(0) {
  }

  virtual ~MT4WebService_getUserRecordByLogin_args() throw();
  int32_t login;

  _MT4WebService_getUserRecordByLogin_args__isset __isset;

  void __set_login(const int32_t val);

  bool operator == (const MT4WebService_getUserRecordByLogin_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getUserRecordByLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getUserRecordByLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getUserRecordByLogin_args& obj);
};


class MT4WebService_getUserRecordByLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MT4WebService_getUserRecordByLogin_pargs() throw();
  const int32_t* login;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getUserRecordByLogin_pargs& obj);
};

typedef struct _MT4WebService_getUserRecordByLogin_result__isset {
  _MT4WebService_getUserRecordByLogin_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getUserRecordByLogin_result__isset;

class MT4WebService_getUserRecordByLogin_result {
 public:

  static const char* ascii_fingerprint; // = "9CBE044766220D61F571BC3D2BCD44FE";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0xBE,0x04,0x47,0x66,0x22,0x0D,0x61,0xF5,0x71,0xBC,0x3D,0x2B,0xCD,0x44,0xFE};

  MT4WebService_getUserRecordByLogin_result(const MT4WebService_getUserRecordByLogin_result&);
  MT4WebService_getUserRecordByLogin_result& operator=(const MT4WebService_getUserRecordByLogin_result&);
  MT4WebService_getUserRecordByLogin_result() {
  }

  virtual ~MT4WebService_getUserRecordByLogin_result() throw();
  MT4UserRecord success;

  _MT4WebService_getUserRecordByLogin_result__isset __isset;

  void __set_success(const MT4UserRecord& val);

  bool operator == (const MT4WebService_getUserRecordByLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getUserRecordByLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getUserRecordByLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getUserRecordByLogin_result& obj);
};

typedef struct _MT4WebService_getUserRecordByLogin_presult__isset {
  _MT4WebService_getUserRecordByLogin_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getUserRecordByLogin_presult__isset;

class MT4WebService_getUserRecordByLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "9CBE044766220D61F571BC3D2BCD44FE";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0xBE,0x04,0x47,0x66,0x22,0x0D,0x61,0xF5,0x71,0xBC,0x3D,0x2B,0xCD,0x44,0xFE};


  virtual ~MT4WebService_getUserRecordByLogin_presult() throw();
  MT4UserRecord* success;

  _MT4WebService_getUserRecordByLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getUserRecordByLogin_presult& obj);
};

typedef struct _MT4WebService_addUser_args__isset {
  _MT4WebService_addUser_args__isset() : mur(false) {}
  bool mur :1;
} _MT4WebService_addUser_args__isset;

class MT4WebService_addUser_args {
 public:

  static const char* ascii_fingerprint; // = "FE2CFE8DC37CA9389310C3BEDE31DF88";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0x2C,0xFE,0x8D,0xC3,0x7C,0xA9,0x38,0x93,0x10,0xC3,0xBE,0xDE,0x31,0xDF,0x88};

  MT4WebService_addUser_args(const MT4WebService_addUser_args&);
  MT4WebService_addUser_args& operator=(const MT4WebService_addUser_args&);
  MT4WebService_addUser_args() {
  }

  virtual ~MT4WebService_addUser_args() throw();
  MT4UserRecord mur;

  _MT4WebService_addUser_args__isset __isset;

  void __set_mur(const MT4UserRecord& val);

  bool operator == (const MT4WebService_addUser_args & rhs) const
  {
    if (!(mur == rhs.mur))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_addUser_args& obj);
};


class MT4WebService_addUser_pargs {
 public:

  static const char* ascii_fingerprint; // = "FE2CFE8DC37CA9389310C3BEDE31DF88";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0x2C,0xFE,0x8D,0xC3,0x7C,0xA9,0x38,0x93,0x10,0xC3,0xBE,0xDE,0x31,0xDF,0x88};


  virtual ~MT4WebService_addUser_pargs() throw();
  const MT4UserRecord* mur;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_addUser_pargs& obj);
};

typedef struct _MT4WebService_addUser_result__isset {
  _MT4WebService_addUser_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_addUser_result__isset;

class MT4WebService_addUser_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MT4WebService_addUser_result(const MT4WebService_addUser_result&);
  MT4WebService_addUser_result& operator=(const MT4WebService_addUser_result&);
  MT4WebService_addUser_result() : success(0) {
  }

  virtual ~MT4WebService_addUser_result() throw();
  int32_t success;

  _MT4WebService_addUser_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MT4WebService_addUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_addUser_result& obj);
};

typedef struct _MT4WebService_addUser_presult__isset {
  _MT4WebService_addUser_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_addUser_presult__isset;

class MT4WebService_addUser_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MT4WebService_addUser_presult() throw();
  int32_t* success;

  _MT4WebService_addUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_addUser_presult& obj);
};

typedef struct _MT4WebService_groupOperation_args__isset {
  _MT4WebService_groupOperation_args__isset() : mgc(false) {}
  bool mgc :1;
} _MT4WebService_groupOperation_args__isset;

class MT4WebService_groupOperation_args {
 public:

  static const char* ascii_fingerprint; // = "E3DAAAA1B40AE54BD18A1ED5BF717F4C";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0xDA,0xAA,0xA1,0xB4,0x0A,0xE5,0x4B,0xD1,0x8A,0x1E,0xD5,0xBF,0x71,0x7F,0x4C};

  MT4WebService_groupOperation_args(const MT4WebService_groupOperation_args&);
  MT4WebService_groupOperation_args& operator=(const MT4WebService_groupOperation_args&);
  MT4WebService_groupOperation_args() {
  }

  virtual ~MT4WebService_groupOperation_args() throw();
  MT4GroupCommand mgc;

  _MT4WebService_groupOperation_args__isset __isset;

  void __set_mgc(const MT4GroupCommand& val);

  bool operator == (const MT4WebService_groupOperation_args & rhs) const
  {
    if (!(mgc == rhs.mgc))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_groupOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_groupOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_groupOperation_args& obj);
};


class MT4WebService_groupOperation_pargs {
 public:

  static const char* ascii_fingerprint; // = "E3DAAAA1B40AE54BD18A1ED5BF717F4C";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0xDA,0xAA,0xA1,0xB4,0x0A,0xE5,0x4B,0xD1,0x8A,0x1E,0xD5,0xBF,0x71,0x7F,0x4C};


  virtual ~MT4WebService_groupOperation_pargs() throw();
  const MT4GroupCommand* mgc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_groupOperation_pargs& obj);
};

typedef struct _MT4WebService_groupOperation_result__isset {
  _MT4WebService_groupOperation_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_groupOperation_result__isset;

class MT4WebService_groupOperation_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  MT4WebService_groupOperation_result(const MT4WebService_groupOperation_result&);
  MT4WebService_groupOperation_result& operator=(const MT4WebService_groupOperation_result&);
  MT4WebService_groupOperation_result() : success(0) {
  }

  virtual ~MT4WebService_groupOperation_result() throw();
  bool success;

  _MT4WebService_groupOperation_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MT4WebService_groupOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_groupOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_groupOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_groupOperation_result& obj);
};

typedef struct _MT4WebService_groupOperation_presult__isset {
  _MT4WebService_groupOperation_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_groupOperation_presult__isset;

class MT4WebService_groupOperation_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~MT4WebService_groupOperation_presult() throw();
  bool* success;

  _MT4WebService_groupOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_groupOperation_presult& obj);
};

typedef struct _MT4WebService_balance_args__isset {
  _MT4WebService_balance_args__isset() : login(false), money(false), type(false), comment(false) {}
  bool login :1;
  bool money :1;
  bool type :1;
  bool comment :1;
} _MT4WebService_balance_args__isset;

class MT4WebService_balance_args {
 public:

  static const char* ascii_fingerprint; // = "3EF97C51B4F5628E24DFF746B3C9EC99";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0xF9,0x7C,0x51,0xB4,0xF5,0x62,0x8E,0x24,0xDF,0xF7,0x46,0xB3,0xC9,0xEC,0x99};

  MT4WebService_balance_args(const MT4WebService_balance_args&);
  MT4WebService_balance_args& operator=(const MT4WebService_balance_args&);
  MT4WebService_balance_args() : login(0), money(0), type((MT4DEAL_TYPE::type)0), comment() {
  }

  virtual ~MT4WebService_balance_args() throw();
  int32_t login;
  double money;
  MT4DEAL_TYPE::type type;
  std::string comment;

  _MT4WebService_balance_args__isset __isset;

  void __set_login(const int32_t val);

  void __set_money(const double val);

  void __set_type(const MT4DEAL_TYPE::type val);

  void __set_comment(const std::string& val);

  bool operator == (const MT4WebService_balance_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(money == rhs.money))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_balance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_balance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_balance_args& obj);
};


class MT4WebService_balance_pargs {
 public:

  static const char* ascii_fingerprint; // = "3EF97C51B4F5628E24DFF746B3C9EC99";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0xF9,0x7C,0x51,0xB4,0xF5,0x62,0x8E,0x24,0xDF,0xF7,0x46,0xB3,0xC9,0xEC,0x99};


  virtual ~MT4WebService_balance_pargs() throw();
  const int32_t* login;
  const double* money;
  const MT4DEAL_TYPE::type* type;
  const std::string* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_balance_pargs& obj);
};

typedef struct _MT4WebService_balance_result__isset {
  _MT4WebService_balance_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_balance_result__isset;

class MT4WebService_balance_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  MT4WebService_balance_result(const MT4WebService_balance_result&);
  MT4WebService_balance_result& operator=(const MT4WebService_balance_result&);
  MT4WebService_balance_result() : success(0) {
  }

  virtual ~MT4WebService_balance_result() throw();
  bool success;

  _MT4WebService_balance_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MT4WebService_balance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_balance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_balance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_balance_result& obj);
};

typedef struct _MT4WebService_balance_presult__isset {
  _MT4WebService_balance_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_balance_presult__isset;

class MT4WebService_balance_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~MT4WebService_balance_presult() throw();
  bool* success;

  _MT4WebService_balance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_balance_presult& obj);
};

typedef struct _MT4WebService_credit_args__isset {
  _MT4WebService_credit_args__isset() : login(false), money(false), type(false), comment(false), ExpirationDayTimestamp(false) {}
  bool login :1;
  bool money :1;
  bool type :1;
  bool comment :1;
  bool ExpirationDayTimestamp :1;
} _MT4WebService_credit_args__isset;

class MT4WebService_credit_args {
 public:

  static const char* ascii_fingerprint; // = "90479AE5192C2CA93B9706F1BBFF7AA8";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x47,0x9A,0xE5,0x19,0x2C,0x2C,0xA9,0x3B,0x97,0x06,0xF1,0xBB,0xFF,0x7A,0xA8};

  MT4WebService_credit_args(const MT4WebService_credit_args&);
  MT4WebService_credit_args& operator=(const MT4WebService_credit_args&);
  MT4WebService_credit_args() : login(0), money(0), type((MT4DEAL_TYPE::type)0), comment(), ExpirationDayTimestamp(0) {
  }

  virtual ~MT4WebService_credit_args() throw();
  int32_t login;
  double money;
  MT4DEAL_TYPE::type type;
  std::string comment;
  int64_t ExpirationDayTimestamp;

  _MT4WebService_credit_args__isset __isset;

  void __set_login(const int32_t val);

  void __set_money(const double val);

  void __set_type(const MT4DEAL_TYPE::type val);

  void __set_comment(const std::string& val);

  void __set_ExpirationDayTimestamp(const int64_t val);

  bool operator == (const MT4WebService_credit_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(money == rhs.money))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(ExpirationDayTimestamp == rhs.ExpirationDayTimestamp))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_credit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_credit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_credit_args& obj);
};


class MT4WebService_credit_pargs {
 public:

  static const char* ascii_fingerprint; // = "90479AE5192C2CA93B9706F1BBFF7AA8";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x47,0x9A,0xE5,0x19,0x2C,0x2C,0xA9,0x3B,0x97,0x06,0xF1,0xBB,0xFF,0x7A,0xA8};


  virtual ~MT4WebService_credit_pargs() throw();
  const int32_t* login;
  const double* money;
  const MT4DEAL_TYPE::type* type;
  const std::string* comment;
  const int64_t* ExpirationDayTimestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_credit_pargs& obj);
};

typedef struct _MT4WebService_credit_result__isset {
  _MT4WebService_credit_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_credit_result__isset;

class MT4WebService_credit_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  MT4WebService_credit_result(const MT4WebService_credit_result&);
  MT4WebService_credit_result& operator=(const MT4WebService_credit_result&);
  MT4WebService_credit_result() : success(0) {
  }

  virtual ~MT4WebService_credit_result() throw();
  bool success;

  _MT4WebService_credit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MT4WebService_credit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_credit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_credit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_credit_result& obj);
};

typedef struct _MT4WebService_credit_presult__isset {
  _MT4WebService_credit_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_credit_presult__isset;

class MT4WebService_credit_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~MT4WebService_credit_presult() throw();
  bool* success;

  _MT4WebService_credit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_credit_presult& obj);
};

typedef struct _MT4WebService_changePassword_args__isset {
  _MT4WebService_changePassword_args__isset() : login(false), password(false), p_type(false), new_password(false) {}
  bool login :1;
  bool password :1;
  bool p_type :1;
  bool new_password :1;
} _MT4WebService_changePassword_args__isset;

class MT4WebService_changePassword_args {
 public:

  static const char* ascii_fingerprint; // = "AAF5C36105F608052703E9371C912912";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xF5,0xC3,0x61,0x05,0xF6,0x08,0x05,0x27,0x03,0xE9,0x37,0x1C,0x91,0x29,0x12};

  MT4WebService_changePassword_args(const MT4WebService_changePassword_args&);
  MT4WebService_changePassword_args& operator=(const MT4WebService_changePassword_args&);
  MT4WebService_changePassword_args() : login(0), password(), p_type((MT4PASSWORD_TYPE::type)0), new_password() {
  }

  virtual ~MT4WebService_changePassword_args() throw();
  int32_t login;
  std::string password;
  MT4PASSWORD_TYPE::type p_type;
  std::string new_password;

  _MT4WebService_changePassword_args__isset __isset;

  void __set_login(const int32_t val);

  void __set_password(const std::string& val);

  void __set_p_type(const MT4PASSWORD_TYPE::type val);

  void __set_new_password(const std::string& val);

  bool operator == (const MT4WebService_changePassword_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(p_type == rhs.p_type))
      return false;
    if (!(new_password == rhs.new_password))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_changePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_changePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_changePassword_args& obj);
};


class MT4WebService_changePassword_pargs {
 public:

  static const char* ascii_fingerprint; // = "AAF5C36105F608052703E9371C912912";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xF5,0xC3,0x61,0x05,0xF6,0x08,0x05,0x27,0x03,0xE9,0x37,0x1C,0x91,0x29,0x12};


  virtual ~MT4WebService_changePassword_pargs() throw();
  const int32_t* login;
  const std::string* password;
  const MT4PASSWORD_TYPE::type* p_type;
  const std::string* new_password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_changePassword_pargs& obj);
};

typedef struct _MT4WebService_changePassword_result__isset {
  _MT4WebService_changePassword_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_changePassword_result__isset;

class MT4WebService_changePassword_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  MT4WebService_changePassword_result(const MT4WebService_changePassword_result&);
  MT4WebService_changePassword_result& operator=(const MT4WebService_changePassword_result&);
  MT4WebService_changePassword_result() : success(0) {
  }

  virtual ~MT4WebService_changePassword_result() throw();
  bool success;

  _MT4WebService_changePassword_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MT4WebService_changePassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_changePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_changePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_changePassword_result& obj);
};

typedef struct _MT4WebService_changePassword_presult__isset {
  _MT4WebService_changePassword_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_changePassword_presult__isset;

class MT4WebService_changePassword_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~MT4WebService_changePassword_presult() throw();
  bool* success;

  _MT4WebService_changePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_changePassword_presult& obj);
};

typedef struct _MT4WebService_getTradesHistoryByLogin_args__isset {
  _MT4WebService_getTradesHistoryByLogin_args__isset() : login(false), fromTimeStamp(false), toTimeStamp(false) {}
  bool login :1;
  bool fromTimeStamp :1;
  bool toTimeStamp :1;
} _MT4WebService_getTradesHistoryByLogin_args__isset;

class MT4WebService_getTradesHistoryByLogin_args {
 public:

  static const char* ascii_fingerprint; // = "1BC2A204AB4F887721511486B2DFEBC8";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xC2,0xA2,0x04,0xAB,0x4F,0x88,0x77,0x21,0x51,0x14,0x86,0xB2,0xDF,0xEB,0xC8};

  MT4WebService_getTradesHistoryByLogin_args(const MT4WebService_getTradesHistoryByLogin_args&);
  MT4WebService_getTradesHistoryByLogin_args& operator=(const MT4WebService_getTradesHistoryByLogin_args&);
  MT4WebService_getTradesHistoryByLogin_args() : login(0), fromTimeStamp(0), toTimeStamp(0) {
  }

  virtual ~MT4WebService_getTradesHistoryByLogin_args() throw();
  int32_t login;
  int64_t fromTimeStamp;
  int64_t toTimeStamp;

  _MT4WebService_getTradesHistoryByLogin_args__isset __isset;

  void __set_login(const int32_t val);

  void __set_fromTimeStamp(const int64_t val);

  void __set_toTimeStamp(const int64_t val);

  bool operator == (const MT4WebService_getTradesHistoryByLogin_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(fromTimeStamp == rhs.fromTimeStamp))
      return false;
    if (!(toTimeStamp == rhs.toTimeStamp))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getTradesHistoryByLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getTradesHistoryByLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getTradesHistoryByLogin_args& obj);
};


class MT4WebService_getTradesHistoryByLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "1BC2A204AB4F887721511486B2DFEBC8";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xC2,0xA2,0x04,0xAB,0x4F,0x88,0x77,0x21,0x51,0x14,0x86,0xB2,0xDF,0xEB,0xC8};


  virtual ~MT4WebService_getTradesHistoryByLogin_pargs() throw();
  const int32_t* login;
  const int64_t* fromTimeStamp;
  const int64_t* toTimeStamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getTradesHistoryByLogin_pargs& obj);
};

typedef struct _MT4WebService_getTradesHistoryByLogin_result__isset {
  _MT4WebService_getTradesHistoryByLogin_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getTradesHistoryByLogin_result__isset;

class MT4WebService_getTradesHistoryByLogin_result {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};

  MT4WebService_getTradesHistoryByLogin_result(const MT4WebService_getTradesHistoryByLogin_result&);
  MT4WebService_getTradesHistoryByLogin_result& operator=(const MT4WebService_getTradesHistoryByLogin_result&);
  MT4WebService_getTradesHistoryByLogin_result() {
  }

  virtual ~MT4WebService_getTradesHistoryByLogin_result() throw();
  std::vector<MT4TradeRecord>  success;

  _MT4WebService_getTradesHistoryByLogin_result__isset __isset;

  void __set_success(const std::vector<MT4TradeRecord> & val);

  bool operator == (const MT4WebService_getTradesHistoryByLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getTradesHistoryByLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getTradesHistoryByLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getTradesHistoryByLogin_result& obj);
};

typedef struct _MT4WebService_getTradesHistoryByLogin_presult__isset {
  _MT4WebService_getTradesHistoryByLogin_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getTradesHistoryByLogin_presult__isset;

class MT4WebService_getTradesHistoryByLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};


  virtual ~MT4WebService_getTradesHistoryByLogin_presult() throw();
  std::vector<MT4TradeRecord> * success;

  _MT4WebService_getTradesHistoryByLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getTradesHistoryByLogin_presult& obj);
};

typedef struct _MT4WebService_getOngingTradesByLogin_args__isset {
  _MT4WebService_getOngingTradesByLogin_args__isset() : login(false) {}
  bool login :1;
} _MT4WebService_getOngingTradesByLogin_args__isset;

class MT4WebService_getOngingTradesByLogin_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MT4WebService_getOngingTradesByLogin_args(const MT4WebService_getOngingTradesByLogin_args&);
  MT4WebService_getOngingTradesByLogin_args& operator=(const MT4WebService_getOngingTradesByLogin_args&);
  MT4WebService_getOngingTradesByLogin_args() : login(0) {
  }

  virtual ~MT4WebService_getOngingTradesByLogin_args() throw();
  int32_t login;

  _MT4WebService_getOngingTradesByLogin_args__isset __isset;

  void __set_login(const int32_t val);

  bool operator == (const MT4WebService_getOngingTradesByLogin_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getOngingTradesByLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getOngingTradesByLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getOngingTradesByLogin_args& obj);
};


class MT4WebService_getOngingTradesByLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MT4WebService_getOngingTradesByLogin_pargs() throw();
  const int32_t* login;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getOngingTradesByLogin_pargs& obj);
};

typedef struct _MT4WebService_getOngingTradesByLogin_result__isset {
  _MT4WebService_getOngingTradesByLogin_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getOngingTradesByLogin_result__isset;

class MT4WebService_getOngingTradesByLogin_result {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};

  MT4WebService_getOngingTradesByLogin_result(const MT4WebService_getOngingTradesByLogin_result&);
  MT4WebService_getOngingTradesByLogin_result& operator=(const MT4WebService_getOngingTradesByLogin_result&);
  MT4WebService_getOngingTradesByLogin_result() {
  }

  virtual ~MT4WebService_getOngingTradesByLogin_result() throw();
  std::vector<MT4TradeRecord>  success;

  _MT4WebService_getOngingTradesByLogin_result__isset __isset;

  void __set_success(const std::vector<MT4TradeRecord> & val);

  bool operator == (const MT4WebService_getOngingTradesByLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getOngingTradesByLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getOngingTradesByLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getOngingTradesByLogin_result& obj);
};

typedef struct _MT4WebService_getOngingTradesByLogin_presult__isset {
  _MT4WebService_getOngingTradesByLogin_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getOngingTradesByLogin_presult__isset;

class MT4WebService_getOngingTradesByLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};


  virtual ~MT4WebService_getOngingTradesByLogin_presult() throw();
  std::vector<MT4TradeRecord> * success;

  _MT4WebService_getOngingTradesByLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getOngingTradesByLogin_presult& obj);
};


class MT4WebService_getAllOngoingTrades_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MT4WebService_getAllOngoingTrades_args(const MT4WebService_getAllOngoingTrades_args&);
  MT4WebService_getAllOngoingTrades_args& operator=(const MT4WebService_getAllOngoingTrades_args&);
  MT4WebService_getAllOngoingTrades_args() {
  }

  virtual ~MT4WebService_getAllOngoingTrades_args() throw();

  bool operator == (const MT4WebService_getAllOngoingTrades_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MT4WebService_getAllOngoingTrades_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllOngoingTrades_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllOngoingTrades_args& obj);
};


class MT4WebService_getAllOngoingTrades_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MT4WebService_getAllOngoingTrades_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllOngoingTrades_pargs& obj);
};

typedef struct _MT4WebService_getAllOngoingTrades_result__isset {
  _MT4WebService_getAllOngoingTrades_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllOngoingTrades_result__isset;

class MT4WebService_getAllOngoingTrades_result {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};

  MT4WebService_getAllOngoingTrades_result(const MT4WebService_getAllOngoingTrades_result&);
  MT4WebService_getAllOngoingTrades_result& operator=(const MT4WebService_getAllOngoingTrades_result&);
  MT4WebService_getAllOngoingTrades_result() {
  }

  virtual ~MT4WebService_getAllOngoingTrades_result() throw();
  std::vector<MT4TradeRecord>  success;

  _MT4WebService_getAllOngoingTrades_result__isset __isset;

  void __set_success(const std::vector<MT4TradeRecord> & val);

  bool operator == (const MT4WebService_getAllOngoingTrades_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getAllOngoingTrades_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllOngoingTrades_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllOngoingTrades_result& obj);
};

typedef struct _MT4WebService_getAllOngoingTrades_presult__isset {
  _MT4WebService_getAllOngoingTrades_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllOngoingTrades_presult__isset;

class MT4WebService_getAllOngoingTrades_presult {
 public:

  static const char* ascii_fingerprint; // = "04182EC662498DD97C6665E676859FC6";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x18,0x2E,0xC6,0x62,0x49,0x8D,0xD9,0x7C,0x66,0x65,0xE6,0x76,0x85,0x9F,0xC6};


  virtual ~MT4WebService_getAllOngoingTrades_presult() throw();
  std::vector<MT4TradeRecord> * success;

  _MT4WebService_getAllOngoingTrades_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllOngoingTrades_presult& obj);
};

typedef struct _MT4WebService_symbolDetail_args__isset {
  _MT4WebService_symbolDetail_args__isset() : symbol(false) {}
  bool symbol :1;
} _MT4WebService_symbolDetail_args__isset;

class MT4WebService_symbolDetail_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MT4WebService_symbolDetail_args(const MT4WebService_symbolDetail_args&);
  MT4WebService_symbolDetail_args& operator=(const MT4WebService_symbolDetail_args&);
  MT4WebService_symbolDetail_args() : symbol() {
  }

  virtual ~MT4WebService_symbolDetail_args() throw();
  std::string symbol;

  _MT4WebService_symbolDetail_args__isset __isset;

  void __set_symbol(const std::string& val);

  bool operator == (const MT4WebService_symbolDetail_args & rhs) const
  {
    if (!(symbol == rhs.symbol))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_symbolDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_symbolDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_symbolDetail_args& obj);
};


class MT4WebService_symbolDetail_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MT4WebService_symbolDetail_pargs() throw();
  const std::string* symbol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_symbolDetail_pargs& obj);
};

typedef struct _MT4WebService_symbolDetail_result__isset {
  _MT4WebService_symbolDetail_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_symbolDetail_result__isset;

class MT4WebService_symbolDetail_result {
 public:

  static const char* ascii_fingerprint; // = "F30B78EC12B1C481CC9EA1F884E16CF0";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x0B,0x78,0xEC,0x12,0xB1,0xC4,0x81,0xCC,0x9E,0xA1,0xF8,0x84,0xE1,0x6C,0xF0};

  MT4WebService_symbolDetail_result(const MT4WebService_symbolDetail_result&);
  MT4WebService_symbolDetail_result& operator=(const MT4WebService_symbolDetail_result&);
  MT4WebService_symbolDetail_result() {
  }

  virtual ~MT4WebService_symbolDetail_result() throw();
  MT4ConSymbol success;

  _MT4WebService_symbolDetail_result__isset __isset;

  void __set_success(const MT4ConSymbol& val);

  bool operator == (const MT4WebService_symbolDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_symbolDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_symbolDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_symbolDetail_result& obj);
};

typedef struct _MT4WebService_symbolDetail_presult__isset {
  _MT4WebService_symbolDetail_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_symbolDetail_presult__isset;

class MT4WebService_symbolDetail_presult {
 public:

  static const char* ascii_fingerprint; // = "F30B78EC12B1C481CC9EA1F884E16CF0";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x0B,0x78,0xEC,0x12,0xB1,0xC4,0x81,0xCC,0x9E,0xA1,0xF8,0x84,0xE1,0x6C,0xF0};


  virtual ~MT4WebService_symbolDetail_presult() throw();
  MT4ConSymbol* success;

  _MT4WebService_symbolDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_symbolDetail_presult& obj);
};

typedef struct _MT4WebService_getHistoryChartData_args__isset {
  _MT4WebService_getHistoryChartData_args__isset() : chartInfo(false) {}
  bool chartInfo :1;
} _MT4WebService_getHistoryChartData_args__isset;

class MT4WebService_getHistoryChartData_args {
 public:

  static const char* ascii_fingerprint; // = "332018A9771910C69226445F28339BD2";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x20,0x18,0xA9,0x77,0x19,0x10,0xC6,0x92,0x26,0x44,0x5F,0x28,0x33,0x9B,0xD2};

  MT4WebService_getHistoryChartData_args(const MT4WebService_getHistoryChartData_args&);
  MT4WebService_getHistoryChartData_args& operator=(const MT4WebService_getHistoryChartData_args&);
  MT4WebService_getHistoryChartData_args() {
  }

  virtual ~MT4WebService_getHistoryChartData_args() throw();
  MT4ChartInfo chartInfo;

  _MT4WebService_getHistoryChartData_args__isset __isset;

  void __set_chartInfo(const MT4ChartInfo& val);

  bool operator == (const MT4WebService_getHistoryChartData_args & rhs) const
  {
    if (!(chartInfo == rhs.chartInfo))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getHistoryChartData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getHistoryChartData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getHistoryChartData_args& obj);
};


class MT4WebService_getHistoryChartData_pargs {
 public:

  static const char* ascii_fingerprint; // = "332018A9771910C69226445F28339BD2";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x20,0x18,0xA9,0x77,0x19,0x10,0xC6,0x92,0x26,0x44,0x5F,0x28,0x33,0x9B,0xD2};


  virtual ~MT4WebService_getHistoryChartData_pargs() throw();
  const MT4ChartInfo* chartInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getHistoryChartData_pargs& obj);
};

typedef struct _MT4WebService_getHistoryChartData_result__isset {
  _MT4WebService_getHistoryChartData_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getHistoryChartData_result__isset;

class MT4WebService_getHistoryChartData_result {
 public:

  static const char* ascii_fingerprint; // = "11F322EA7D0A2C6BE7F49031B40020F5";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0xF3,0x22,0xEA,0x7D,0x0A,0x2C,0x6B,0xE7,0xF4,0x90,0x31,0xB4,0x00,0x20,0xF5};

  MT4WebService_getHistoryChartData_result(const MT4WebService_getHistoryChartData_result&);
  MT4WebService_getHistoryChartData_result& operator=(const MT4WebService_getHistoryChartData_result&);
  MT4WebService_getHistoryChartData_result() {
  }

  virtual ~MT4WebService_getHistoryChartData_result() throw();
  std::vector<MT4RateInfo>  success;

  _MT4WebService_getHistoryChartData_result__isset __isset;

  void __set_success(const std::vector<MT4RateInfo> & val);

  bool operator == (const MT4WebService_getHistoryChartData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getHistoryChartData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getHistoryChartData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getHistoryChartData_result& obj);
};

typedef struct _MT4WebService_getHistoryChartData_presult__isset {
  _MT4WebService_getHistoryChartData_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getHistoryChartData_presult__isset;

class MT4WebService_getHistoryChartData_presult {
 public:

  static const char* ascii_fingerprint; // = "11F322EA7D0A2C6BE7F49031B40020F5";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0xF3,0x22,0xEA,0x7D,0x0A,0x2C,0x6B,0xE7,0xF4,0x90,0x31,0xB4,0x00,0x20,0xF5};


  virtual ~MT4WebService_getHistoryChartData_presult() throw();
  std::vector<MT4RateInfo> * success;

  _MT4WebService_getHistoryChartData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getHistoryChartData_presult& obj);
};


class MT4WebService_getAllGroups_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MT4WebService_getAllGroups_args(const MT4WebService_getAllGroups_args&);
  MT4WebService_getAllGroups_args& operator=(const MT4WebService_getAllGroups_args&);
  MT4WebService_getAllGroups_args() {
  }

  virtual ~MT4WebService_getAllGroups_args() throw();

  bool operator == (const MT4WebService_getAllGroups_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MT4WebService_getAllGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllGroups_args& obj);
};


class MT4WebService_getAllGroups_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MT4WebService_getAllGroups_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllGroups_pargs& obj);
};

typedef struct _MT4WebService_getAllGroups_result__isset {
  _MT4WebService_getAllGroups_result__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllGroups_result__isset;

class MT4WebService_getAllGroups_result {
 public:

  static const char* ascii_fingerprint; // = "4C0843A31A9C01594A28D666377B8665";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x08,0x43,0xA3,0x1A,0x9C,0x01,0x59,0x4A,0x28,0xD6,0x66,0x37,0x7B,0x86,0x65};

  MT4WebService_getAllGroups_result(const MT4WebService_getAllGroups_result&);
  MT4WebService_getAllGroups_result& operator=(const MT4WebService_getAllGroups_result&);
  MT4WebService_getAllGroups_result() {
  }

  virtual ~MT4WebService_getAllGroups_result() throw();
  std::vector<MT4ConGroup>  success;

  _MT4WebService_getAllGroups_result__isset __isset;

  void __set_success(const std::vector<MT4ConGroup> & val);

  bool operator == (const MT4WebService_getAllGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MT4WebService_getAllGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_getAllGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllGroups_result& obj);
};

typedef struct _MT4WebService_getAllGroups_presult__isset {
  _MT4WebService_getAllGroups_presult__isset() : success(false) {}
  bool success :1;
} _MT4WebService_getAllGroups_presult__isset;

class MT4WebService_getAllGroups_presult {
 public:

  static const char* ascii_fingerprint; // = "4C0843A31A9C01594A28D666377B8665";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x08,0x43,0xA3,0x1A,0x9C,0x01,0x59,0x4A,0x28,0xD6,0x66,0x37,0x7B,0x86,0x65};


  virtual ~MT4WebService_getAllGroups_presult() throw();
  std::vector<MT4ConGroup> * success;

  _MT4WebService_getAllGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_getAllGroups_presult& obj);
};


class MT4WebService_testSayHi_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MT4WebService_testSayHi_args(const MT4WebService_testSayHi_args&);
  MT4WebService_testSayHi_args& operator=(const MT4WebService_testSayHi_args&);
  MT4WebService_testSayHi_args() {
  }

  virtual ~MT4WebService_testSayHi_args() throw();

  bool operator == (const MT4WebService_testSayHi_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MT4WebService_testSayHi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_testSayHi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_testSayHi_args& obj);
};


class MT4WebService_testSayHi_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MT4WebService_testSayHi_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_testSayHi_pargs& obj);
};


class MT4WebService_testSayHi_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MT4WebService_testSayHi_result(const MT4WebService_testSayHi_result&);
  MT4WebService_testSayHi_result& operator=(const MT4WebService_testSayHi_result&);
  MT4WebService_testSayHi_result() {
  }

  virtual ~MT4WebService_testSayHi_result() throw();

  bool operator == (const MT4WebService_testSayHi_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MT4WebService_testSayHi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MT4WebService_testSayHi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_testSayHi_result& obj);
};


class MT4WebService_testSayHi_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MT4WebService_testSayHi_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MT4WebService_testSayHi_presult& obj);
};

class MT4WebServiceClient : virtual public MT4WebServiceIf {
 public:
  MT4WebServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MT4WebServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAllUserRecord(std::vector<MT4UserRecord> & _return);
  void send_getAllUserRecord();
  void recv_getAllUserRecord(std::vector<MT4UserRecord> & _return);
  void getUserRecordByLogin(MT4UserRecord& _return, const int32_t login);
  void send_getUserRecordByLogin(const int32_t login);
  void recv_getUserRecordByLogin(MT4UserRecord& _return);
  int32_t addUser(const MT4UserRecord& mur);
  void send_addUser(const MT4UserRecord& mur);
  int32_t recv_addUser();
  bool groupOperation(const MT4GroupCommand& mgc);
  void send_groupOperation(const MT4GroupCommand& mgc);
  bool recv_groupOperation();
  bool balance(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment);
  void send_balance(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment);
  bool recv_balance();
  bool credit(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment, const int64_t ExpirationDayTimestamp);
  void send_credit(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment, const int64_t ExpirationDayTimestamp);
  bool recv_credit();
  bool changePassword(const int32_t login, const std::string& password, const MT4PASSWORD_TYPE::type p_type, const std::string& new_password);
  void send_changePassword(const int32_t login, const std::string& password, const MT4PASSWORD_TYPE::type p_type, const std::string& new_password);
  bool recv_changePassword();
  void getTradesHistoryByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login, const int64_t fromTimeStamp, const int64_t toTimeStamp);
  void send_getTradesHistoryByLogin(const int32_t login, const int64_t fromTimeStamp, const int64_t toTimeStamp);
  void recv_getTradesHistoryByLogin(std::vector<MT4TradeRecord> & _return);
  void getOngingTradesByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login);
  void send_getOngingTradesByLogin(const int32_t login);
  void recv_getOngingTradesByLogin(std::vector<MT4TradeRecord> & _return);
  void getAllOngoingTrades(std::vector<MT4TradeRecord> & _return);
  void send_getAllOngoingTrades();
  void recv_getAllOngoingTrades(std::vector<MT4TradeRecord> & _return);
  void symbolDetail(MT4ConSymbol& _return, const std::string& symbol);
  void send_symbolDetail(const std::string& symbol);
  void recv_symbolDetail(MT4ConSymbol& _return);
  void getHistoryChartData(std::vector<MT4RateInfo> & _return, const MT4ChartInfo& chartInfo);
  void send_getHistoryChartData(const MT4ChartInfo& chartInfo);
  void recv_getHistoryChartData(std::vector<MT4RateInfo> & _return);
  void getAllGroups(std::vector<MT4ConGroup> & _return);
  void send_getAllGroups();
  void recv_getAllGroups(std::vector<MT4ConGroup> & _return);
  void testSayHi();
  void send_testSayHi();
  void recv_testSayHi();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MT4WebServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MT4WebServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MT4WebServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAllUserRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserRecordByLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_balance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_credit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTradesHistoryByLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOngingTradesByLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllOngoingTrades(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_symbolDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoryChartData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_testSayHi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MT4WebServiceProcessor(boost::shared_ptr<MT4WebServiceIf> iface) :
    iface_(iface) {
    processMap_["getAllUserRecord"] = &MT4WebServiceProcessor::process_getAllUserRecord;
    processMap_["getUserRecordByLogin"] = &MT4WebServiceProcessor::process_getUserRecordByLogin;
    processMap_["addUser"] = &MT4WebServiceProcessor::process_addUser;
    processMap_["groupOperation"] = &MT4WebServiceProcessor::process_groupOperation;
    processMap_["balance"] = &MT4WebServiceProcessor::process_balance;
    processMap_["credit"] = &MT4WebServiceProcessor::process_credit;
    processMap_["changePassword"] = &MT4WebServiceProcessor::process_changePassword;
    processMap_["getTradesHistoryByLogin"] = &MT4WebServiceProcessor::process_getTradesHistoryByLogin;
    processMap_["getOngingTradesByLogin"] = &MT4WebServiceProcessor::process_getOngingTradesByLogin;
    processMap_["getAllOngoingTrades"] = &MT4WebServiceProcessor::process_getAllOngoingTrades;
    processMap_["symbolDetail"] = &MT4WebServiceProcessor::process_symbolDetail;
    processMap_["getHistoryChartData"] = &MT4WebServiceProcessor::process_getHistoryChartData;
    processMap_["getAllGroups"] = &MT4WebServiceProcessor::process_getAllGroups;
    processMap_["testSayHi"] = &MT4WebServiceProcessor::process_testSayHi;
  }

  virtual ~MT4WebServiceProcessor() {}
};

class MT4WebServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MT4WebServiceProcessorFactory(const ::boost::shared_ptr< MT4WebServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MT4WebServiceIfFactory > handlerFactory_;
};

class MT4WebServiceMultiface : virtual public MT4WebServiceIf {
 public:
  MT4WebServiceMultiface(std::vector<boost::shared_ptr<MT4WebServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MT4WebServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MT4WebServiceIf> > ifaces_;
  MT4WebServiceMultiface() {}
  void add(boost::shared_ptr<MT4WebServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAllUserRecord(std::vector<MT4UserRecord> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserRecord(_return);
    }
    ifaces_[i]->getAllUserRecord(_return);
    return;
  }

  void getUserRecordByLogin(MT4UserRecord& _return, const int32_t login) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserRecordByLogin(_return, login);
    }
    ifaces_[i]->getUserRecordByLogin(_return, login);
    return;
  }

  int32_t addUser(const MT4UserRecord& mur) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(mur);
    }
    return ifaces_[i]->addUser(mur);
  }

  bool groupOperation(const MT4GroupCommand& mgc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupOperation(mgc);
    }
    return ifaces_[i]->groupOperation(mgc);
  }

  bool balance(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->balance(login, money, type, comment);
    }
    return ifaces_[i]->balance(login, money, type, comment);
  }

  bool credit(const int32_t login, const double money, const MT4DEAL_TYPE::type type, const std::string& comment, const int64_t ExpirationDayTimestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->credit(login, money, type, comment, ExpirationDayTimestamp);
    }
    return ifaces_[i]->credit(login, money, type, comment, ExpirationDayTimestamp);
  }

  bool changePassword(const int32_t login, const std::string& password, const MT4PASSWORD_TYPE::type p_type, const std::string& new_password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changePassword(login, password, p_type, new_password);
    }
    return ifaces_[i]->changePassword(login, password, p_type, new_password);
  }

  void getTradesHistoryByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login, const int64_t fromTimeStamp, const int64_t toTimeStamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTradesHistoryByLogin(_return, login, fromTimeStamp, toTimeStamp);
    }
    ifaces_[i]->getTradesHistoryByLogin(_return, login, fromTimeStamp, toTimeStamp);
    return;
  }

  void getOngingTradesByLogin(std::vector<MT4TradeRecord> & _return, const int32_t login) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOngingTradesByLogin(_return, login);
    }
    ifaces_[i]->getOngingTradesByLogin(_return, login);
    return;
  }

  void getAllOngoingTrades(std::vector<MT4TradeRecord> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllOngoingTrades(_return);
    }
    ifaces_[i]->getAllOngoingTrades(_return);
    return;
  }

  void symbolDetail(MT4ConSymbol& _return, const std::string& symbol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->symbolDetail(_return, symbol);
    }
    ifaces_[i]->symbolDetail(_return, symbol);
    return;
  }

  void getHistoryChartData(std::vector<MT4RateInfo> & _return, const MT4ChartInfo& chartInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoryChartData(_return, chartInfo);
    }
    ifaces_[i]->getHistoryChartData(_return, chartInfo);
    return;
  }

  void getAllGroups(std::vector<MT4ConGroup> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGroups(_return);
    }
    ifaces_[i]->getAllGroups(_return);
    return;
  }

  void testSayHi() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->testSayHi();
    }
    ifaces_[i]->testSayHi();
  }

};



#endif
